(function(){"use strict";var Init={beforeCreate(){Vue.prototype.$global=new Vue({data:{state:{}}})}};let u={color:{},math:{},array:{},string:{},state:{},other:{}};const getCssVariable=(value,el=document.body)=>getComputedStyle(el).getPropertyValue(value);const setCssVariable=(key,value,el=document.body.style)=>el.setProperty(key,value);u.color.color=`\n\n\`color('name')\`\n\nReturns a color value. If \`name\` matches one of framework colors, framework color value is returned. If not, a standard CSS color name is returned.\n\n#### Example\n\n    color('red')\n    color('rebeccapurple')\n\n#### Output\n\n    {{ color('red') }}\n    {{ color('rebeccapurple')}}\n\n`;const color=name=>{const color=getCssVariable(`--${name}`);return color?color.trim():name.trim()};u.color.rgb=`\n\n\`rgb(r, g, b, a = false)\`\n\nOutputs a CSS \`rgba()\` string\n\n#### Example\n\n    rgb(50,100,50,0.5)\n    rgb(50,100,50)\n\n#### Output\n\n    {{ rgb(50,100,50,0.5) }}\n    {{ rgb(50,100,50) }}\n\n`;const rgb=(r,g,b,a=false)=>a?`rgba(${r},${g},${b},${a})`:`rgb(${r},${g},${b})`;u.color.hsl=`\n\n\`hsl(h, s = 100, l = 50, a = 1)\`\n\nOutputs a CSS \`hsla()\` string\n\n#### Example\n\n    hsl(50,100,50,0.5)\n    hsl(50,100,50)\n    hsl(50)\n\n#### Output\n\n    {{ hsl(50,100,50,0.5) }}\n    {{ hsl(50,100,50) }}\n    {{ hsl(50) }}\n\n`;const hsl=(h,s=100,l=50,a=1)=>`hsl(${h},${s}%,${l}%,${a})`;u.math.scale=`\n\n\`scale(value, start1, stop1, start2 = -2, stop2 = 2)\`\n\nScales linearily the input \`value\`\nfrom the input range between \`start1\` and \`stop1\`\nto the output range  \`start2\` and \`stop2\`.\n\n#### Example\n\n    scale(50, 0, 100, 0, 1)\n\n#### Output\n\n    {{ scale(50, 0, 100, 0, 1) }}\n\n`;const scale=(value,start1,stop1,start2=-2,stop2=2)=>{return(value-start1)/(stop1-start1)*(stop2-start2)+start2};u.math.round=`\n\n\`round(value, decimals = 0)\`\n\nRounds a number \`value\` to optional \`decimals\`.\n\nExample\n    \n    round(0.1234)\n    round(0.1234, 2)\n\nOutput\n  \n    {{ round(0.1234) }}\n    {{ round(0.1234, 2) }}\n\n`;const round=(value,decimals=0)=>{return Number(Math.round(value+"e"+decimals)+"e-"+decimals)};u.math.random=`\n\n\`random(from, to, float = false)\`\n\nGenerates a random integer number between \`from\` and \`to\`. \nIf \`float = true\`, the output value will be floating point number.\n\nExample\n    \n    random(0, 2)\n    random(0, 2, true)\n\nOutput\n  \n    {{ random(0, 2) }}\n    {{ random(0, 2, true) }}\n`;const random=(from,to,float=false)=>{const r=from+Math.random()*(to-from);return float?r:Math.floor(r,2)};u.math.range=`\n\n\`range(from, to, step = 1)\`\n\nGenerates an array of integer numbers in between \`from\` and \`to\` with optional \`step\` parameter.\n\nExample\n\n    range(-1, 1, 0.5)\n\nOutput\n\n    {{ range(-1, 1, 0.5) }}\n\n`;const range=(from,to,step=1)=>{const length=Math.floor((to-from)/step)+1;return Array.from({length:length}).map((_,i)=>from+i*step)};u.math.polarx=`\n\n\`polarx(angle, radius = 1)\`\n\nGiven the polar coordinates \`angle radius\`, return cartesian coordinates \`x y\`.\n\n#### Example\n\n    polarx(90, 10)\n\n#### Output\n\n    {{ polarx(90, 10) }}\n\n`;const polarx=(deg=0,radius=1)=>{return Math.cos((deg-90)*(Math.PI/180))*radius};u.math.polarx=`\n\n\`polary(angle, radius = 1)\`\n\nGiven the polar coordinates \`angle radius\`, return cartesian coordinates \`x y\`.\n\n#### Example\n\n    polary(90, 10)\n\n#### Output\n\n    {{ polary(90, 10) }}\n\n`;const polary=(deg=0,radius=1)=>{return Math.sin((deg-90)*(Math.PI/180))*radius};const cx=(deg,radius)=>{return Math.cos((deg-90)*(Math.PI/180))*radius};const cy=(deg,radius)=>{return Math.sin((deg-90)*(Math.PI/180))*radius};u.math.polarpoints=`\n\n\`polarpoints(count = 6, radius = 1)\`\n\nCalculates \`count\` of \`{ x, y }\` points on the circle.\n\n#### Example\n\n    polarpoints(4,10)\n\n#### Output\n\n    {{ polarpoints(4,10) }}\n`;const polarpoints=(count=6,radius=1)=>{return Array.from({length:count}).map((p,i)=>({x:cx(360/count*i,radius),y:cy(360/count*i,radius)}))};const cpoints=(count=6,radius=1)=>{return Array.from({length:count}).map((p,i)=>({x:cx(360/count*i,radius),y:cy(360/count*i,radius)}))};u.math.deg2rad=`\n\n\`deg2rad(angle)\`\n\nConverts angle in degrees to radians.\n\n#### Example\n\n<f-math>\nradians = \\frac{degrees \\cdot \\pi}{180} = \\frac{180 \\cdot \\pi}{180} = \\pi\n</f-math>\n\n    deg2rad(180)\n\n#### Output\n\n    {{ deg2rad(180) }}\n`;const deg2rad=deg=>deg*Math.PI/180;u.math.rad2deg=`\n\n\`rad2deg(angle)\`\n\nConverts angle in radians to degrees.\n\n#### Example\n\n    rad2deg(Math.PI)\n\n#### Output\n\n    {{ rad2deg(Math.PI) }}\n`;const rad2deg=rad=>rad*180/Math.PI;u.array.shuffle=`\n\n\`shuffle(array)\`\n\nSorts the array in random order.\n\n#### Example\n\n    shuffle(range(0,3))\n\n#### Output\n\n    {{ shuffle(range(0,3)) }}\n\n`;const shuffle=arr=>arr.sort(()=>Math.random()-.5);u.array.any=`\n\n\`any(array)\`\n\nPicks a random element from the array.\nSupports both array and function argument syntax.\n\n#### Example\n\n    any([0,1,2])\n    any(0,1,2)\n\n#### Output\n\n    {{ any([0,1,2]) }}\n    {{ any(0,1,2) }}\n\n`;const any=function(arr){return arr instanceof Array?shuffle(arr)[0]:shuffle(Array.from(arguments))[0]};u.array.flatten=`\n\n\`flatten(array)\`\n\nFlattens multidimensional array\n\n#### Example\n\n    flatten([0,1,[2,[3,4]]])\n\n#### Output\n\n    {{ flatten([0,1,[2,[3,4]]]) }}\n\n`;const flatten=list=>list.reduce((a,b)=>a.concat(Array.isArray(b)?flatten(b):b),[]);u.array.chunk=`\n\n\`chunk(array, length)\`\n\nChunks array into smaller \`length\`-sizeu.arrays\n\n#### Example\n\n    chunk([0,1,2,3],2)\n\n#### Output\n\n    {{ chunk([0,1,2,3],2) }}\n\n`;const chunk=(arr,length)=>Array.from({length:Math.ceil(arr.length/length)}).map((_,n)=>arr.slice(n*length,n*length+length));u.array.unique=`\n\n\`unique(array)\`\n\nRemoves duplicates from the array\n\n#### Example\n\n    unique([0,0,1,2])\n\n#### Output\n\n    {{ unique([0,0,1,2]) }}\n\n`;const unique=arr=>[...new Set(arr)];u.string.titleCase=`\n\n\`titleCase(string)\`\n\nConverts string to **Title Case**\n\n#### Example\n\n    titleCase('das ist wunderbar')\n\n#### Output\n\n    {{ titleCase('das ist wunderbar') }}\n\n`;const titleCase=string=>string.split(" ").map(([h,...t])=>h.toUpperCase()+t.join("").toLowerCase()).join(" ");u.string.kebabCase=`\n\n\`kebabCase(string)\`\n\nConverts string to **kebab-case**\n\n#### Example\n\n    kebabCase('DonnerWetter')\n\n#### Output\n\n    {{ kebabCase('DonnerWetter') }}\n\n`;const kebabCase=string=>string.replace(/([a-zA-Z])(?=[A-Z])/g,"$1-").toLowerCase();u.string.join=`\n\n\`join(value1, value2, value3)\`\n\nJoins a set of values to a space-separated string, useful for A-Frame integration.\n\n#### Input\n\n    join([1,2,3])\n    join(4,5,6)\n\n#### Output\n\n    {{ join([1,2,3]) }}\n    {{ join(4,5,6) }}\n\n`;const join=function(arr){return arr instanceof Array?arr.join(" "):Array.from(arguments).join(" ")};u.state.send=`\n\n\`send(name, value)\`\n\nTBD\n\n`;const send=function(channel,value){if(this.$global){const v=parseFloat(value);this.$global.$emit(channel,value==NaN?value:v)}};u.state.receive=`\n\n\`receive(name, callback)\`\n\nTBD\n\n`;const receive=function(channel,callback){if(this.$global){this.$global.$on(channel,callback)}};u.state.get=`\n\n\`get(key, default = null)\`\n\nTBD\n\n`;const get=function(key,def=null){if(this.$global){const state=this.$global.$data.state[key];return state!==undefined?state:def}return null};u.state.set=`\n\n\`set(key, value)\`\n\nTBD\n\n`;const set=function(key,value){if(this.$global){const arr=Array.from(arguments);if(arr.length==1){key="value";value=arr[0]}Vue.set(this.$global.$data.state,key,parseFloat(value))}return null};u.other.debounce=`\n\n\`debounce = (fn, time)\`\n\nTBD\n\n`;const debounce=(fn,time)=>{let timeout;return function(){const functionCall=()=>fn.apply(this,arguments);clearTimeout(timeout);timeout=setTimeout(functionCall,time)}};u.other.snapToGrid=`\n\n\`snapToGrid(value, gridsize)\`\n\nReturns the value in the closest point of 2D grid.\n\n#### Input\n\n    snapToGrid(0.51,0.5)\n\n#### Output\n\n    {{ snapToGrid(0.51,0.5) }}\n`;const snapToGrid=(value,gridsize)=>{return value%gridsize<gridsize/2?value-value%gridsize:value+gridsize-value%gridsize};u.other.log=`\n\n\`log(message)\`\n\nLogs a value from a template to the console\n\n`;const log=value=>console.log(value);const parseSheet=data=>{return data.feed.entry.map(entry=>{return Object.keys(entry).map(field=>{if(field.startsWith("gsx$")){return[field.split("$")[1],entry[field].$t]}}).filter(field=>field).reduce((field,item)=>{field[item[0]]=item[1];return field},{})})};const cleanColumns=content=>{const pattern=/(\|[0-9\s]+\n)/g;return content.replace(pattern,"")};const parseColumns=slide=>{const pattern=/(\|[0-9\s]+\n)/g;const match=slide.match(pattern);if(match){const rowCount=match.length;const cols=match.map(m=>{return m.trim().replace(/\|/g,"").split("").filter(m=>!m.match(/\s+/))});const colCount=cols[0].length;const areas=cols.map(m=>`'${m.map(m=>`a${m}`).join(" ")}'`).join("\n");const content=slide.split(/\n-\n/).map(c=>c.replace(pattern,""));return{rowCount:rowCount,colCount:colCount,areas:areas,content:content}}else{const content=slide.split(/\n-\n/);return{rowCount:1,colCount:content.length,areas:`'${content.map((_,i)=>`a${i+1}`).join(" ")}'`,content:content}}};const coordsTextToArray=text=>{return text.split(",").map(t=>t.trim().replace(/\s+/g," ").split(" ").map(c=>parseFloat(c)))};const coordsArrayToObject=array=>{return array.map(a=>({x:a[0],y:a[1]||0,z:a[2]||0}))};const parseCoords=c=>{if(typeof c=="string"){return coordsArrayToObject(coordsTextToArray(c))}if(Array.isArray(c)){return coordsArrayToObject(c)}if(!Array.isArray(c)&&typeof c=="object"){return c}return null};const utilsDocs=()=>u;var utils=Object.freeze({getCssVariable:getCssVariable,setCssVariable:setCssVariable,color:color,rgb:rgb,hsl:hsl,scale:scale,round:round,random:random,range:range,polarx:polarx,polary:polary,polarpoints:polarpoints,cx:cx,cy:cy,cpoints:cpoints,deg2rad:deg2rad,rad2deg:rad2deg,shuffle:shuffle,any:any,chunk:chunk,unique:unique,flatten:flatten,snapToGrid:snapToGrid,log:log,join:join,parseSheet:parseSheet,parseColumns:parseColumns,cleanColumns:cleanColumns,kebabCase:kebabCase,titleCase:titleCase,debounce:debounce,send:send,receive:receive,set:set,get:get,parseCoords:parseCoords,utilsDocs:utilsDocs});var Css={created(){if(this.$options.css){const el=document.createElement("style");el.innerHTML=this.$options.css;document.querySelector("head").appendChild(el)}if(this.$options.cssprops){Object.entries(this.$options.cssprops).forEach(([key,value])=>{setCssVariable(key,value.default)})}}};var Object2d={methods:{parseTransform(transform){if(typeof transform=="string"){return parseCoords(transform)}if(Array.isArray(transform)&&transform.length){return transform.map(c=>parseCoords(c))}return transform}},computed:{positionTransform(){if(typeof this.position=="string"){this.position=this.parseTransform(this.position)[0]}return`translate(${this.position.x||0} ${this.position.y||0})`},rotationTransform(){if(typeof this.rotation=="string"){this.rotation=this.parseTransform(this.rotation)[0]}return`rotate(${this.rotation.x||this.rotation.y||this.rotation.z||0})`},scaleTransform(){if(typeof this.scale=="string"){this.scale=this.parseTransform(this.scale)[0]}return`scale(${this.scale.x||1,this.scale.y||this.scale.x||1})`},transform(){return`${this.positionTransform} ${this.rotationTransform} ${this.scaleTransform}`}}};var FSvg={mixins:[Css],props:{width:{default:250,type:[Number,String]},height:{default:250,type:[Number,String]},innerX:{default:0,type:[Number,String]},innerY:{default:0,type:[Number,String]},innerWidth:{default:null,type:[Number,String]},innerHeight:{default:null,type:[Number,String]},flipX:{default:false,type:Boolean},flipY:{default:false,type:Boolean}},data:()=>({mouseX:0,mouseY:0,mousePressed:false}),methods:{onMousemove(e){let svg=this.$refs.f_svg;let container=this.$refs.f_svg_g;let point=svg.createSVGPoint();point.x=e.clientX;point.y=e.clientY;let ctm=container.getScreenCTM();if(ctm=ctm.inverse()){point=point.matrixTransform(ctm)}this.mouseX=point.x;this.mouseY=point.y}},computed:{viewBox(){return`${this.innerX} ${this.innerY} ${this.innerWidth||this.width} ${this.innerHeight||this.height}`},transform(){return`scale(${this.flipX?-1:1},${this.flipY?-1:1})`}},template:`\n    <svg\n        xmlns="http://www.w3.org/2000/svg"\n        :width="width"\n        :height="height"\n        :view-box.camel="viewBox"\n        class="f-svg"\n        ref="f_svg"\n        @mousemove="onMousemove"\n        @touchmove="onMousemove"\n        @mousedown="mousePressed = true"\n        @touchstart="mousePressed = true"\n        @mouseup="mousePressed = false"\n        @touchend="mousePressed = false"\n    >\n      <g :transform="transform" ref="f_svg_g">\n        <slot :value="[mouseX,mouseY,mousePressed]" />\n      </g>\n    </svg>\n  `,css:`\n    .f-svg * {\n      vector-effect: non-scaling-stroke;\n    }\n    .f-svg text {\n      fill: var(--primary);\n      font-family: var(--font-mono);\n      font-size: var(--text-size);\n      transform: var(--text-transform);\n      pointer-events: none;\n    }\n    \n  `};var FBasegrid={props:{innerX:{default:0,type:[Number,String]},innerY:{default:0,type:[Number,String]},innerWidth:{default:250,type:[Number,String]},innerHeight:{default:250,type:[Number,String]},step:{default:25,type:[Number,String]},opacity:{default:.2,type:[Number,String]}},methods:{range:range,color:color},template:`\n    <f-group>\n      <f-line\n        :x1="0"\n        :y1="innerY"\n        :x2="0"\n        :y2="innerY + innerHeight"\n        :stroke="color('primary')"\n        :stroke-width="1"\n        :opacity="opacity * 1.5"\n      />\n      <f-line\n        :x1="innerX"\n        :y1="0"\n        :x2="innerX + innerWidth"\n        :y2="0"\n        :stroke="color('primary')"\n        :stroke-width="1"\n        :opacity="opacity * 1.5"\n      />\n      <f-line\n        v-for="(x,i) in range(innerX,innerX + innerWidth,step)"\n        :key="'x' + i"\n        :x1="x"\n        :y1="innerY"\n        :x2="x"\n        :y2="innerY + innerHeight"\n        :stroke="color('primary')"\n        :stroke-width="1"\n        :opacity="opacity"\n      />\n      <f-line\n        v-for="(y,i) in range(innerY,innerY + innerHeight,step)"\n        :key="'y' + i"\n        :x1="innerX"\n        :y1="y"\n        :x2="innerX + innerWidth"\n        :y2="y"\n        :stroke="color('primary')"\n        :stroke-width="1"\n        :opacity="opacity"\n      />\n    </f-group>\n  `};var FScene={description:`\nA 2D vector graphics scene.\n\nTechnically it draws a \`svg\` element and sets it coordinate system suitable for graph drawing and allows easy migration to 3D, just replace it with \`<f-scene3>\`.\n\n<f-scene grid="true">\n  \n  \x3c!-- Coordinates increase towards top right --\x3e\n  <f-point r="0.1" x="1" y="1" :stroke="color('blue')" />\n  <f-text x="1" y="1" :fill="color('blue')">\n    x:1 y:1\n  </f-text>\n  \n  \x3c!-- Regular SVG elements are OK as well here --\x3e\n  <circle cx="-1" cy="-1" r="0.02" fill="rebeccapurple" />\n\n  <f-text x="-1" y="-1" :fill="color('purple')">\n    x:-1 y:-1\n  </f-text>\n</f-scene>\n  `,props:{width:{default:250,type:[Number,String],description:"Scene width in pixels"},height:{default:250,type:[Number,String]},grid:{default:false,type:[Boolean,String]},step:{default:.5,type:[Number,String]}},computed:{innerWidth(){return this.width>=this.height?4*this.width/this.height:4},innerHeight(){return this.width>=this.height?4:4*this.height/this.width},innerX(){return this.innerWidth/-2},innerY(){return this.innerHeight/-2}},template:`\n  <f-svg \n    :width="width"\n    :height="height"\n    :inner-x="innerX"\n    :inner-y="innerY"\n    :inner-width="innerWidth"\n    :inner-height="innerHeight"\n    :flip-y="true"\n    style="\n      --text-size: 1.4%;\n      --text-transform: scale(1,-1);\n    "\n  >\n    <f-group slot-scope="data">\n      <f-basegrid\n        v-if="grid"\n        :inner-x="innerX"\n        :inner-y="innerY"\n        :inner-width="innerWidth"\n        :inner-height="innerHeight"\n        :step="step"\n      />\n      <slot :value="data.value" />\n    </f-group>\n  </f-svg>\n  `};var FGrid={mixins:[Object2d],description:`\nAs the classic once [wrote](http://printingcode.runemadsen.com/lecture-grid/), there is nothing worse for an artist than a blank canvas.\n\n\`<f-grid\`> generates a regular 2D grid with optional \`step\` parameter and allows greater freedom to generate custom grid using transformation parameters.\n\n<f-scene>\n  <f-grid />\n  <f-grid :step="0.25" />\n  <f-grid :step="0.125" />\n</f-scene>\n  `,props:{step:{default:.5,type:Number},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:.15,type:Number}},template:`\n  <f-group :transform="transform">\n    <f-basegrid\n      :inner-x="-2"\n      :inner-y="-2"\n      :inner-width="4"\n      :inner-height="4"\n      :step="step"\n      :opacity="opacity"\n    />\n    <f-basegrid\n      :inner-x="-2"\n      :inner-y="-2"\n      :inner-width="4"\n      :inner-height="4"\n      :step="step * 4"\n      :opacity="opacity"\n    />\n  </f-group>\n  `};var FGroup={mixins:[Object2d],description:`\nGroups child elements and a applies geometric transformations to the group.\n\nTechnically it generates a \`g\` tag and adds custom transformation parameters.\n\n<f-scene>\n  <f-grid />\n  <f-group\n    :position="{ x: 1, y: 1 }"\n    :rotation="{ z: 45 }"\n    :scale="{ x: 0.2, y: 0.2 }"\n  >\n    <f-box />\n  </f-group>\n</f-scene>\n  `,props:{position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object}},template:`\n    <g :transform="transform">\n      <slot />\n    </g>\n  `};var FBox={mixins:[Object2d],description:`\n<f-scene>\n  <f-grid />\n  <f-box />\n  <f-box\n    :points="[{x: -1},{x: 0},{x: 1}]"\n    :r="0.1"\n    width="0.2"\n    height="0.2"\n  />\n</f-scene>\n  `,props:{x:{default:0,type:[Number,String]},y:{default:0,type:[Number,String]},points:{default:()=>[],type:Array},r:{default:null,type:Number},width:{default:1,type:[Number,String]},height:{default:1,type:[Number,String]},stroke:{default:"color('primary')",type:String},strokeWidth:{default:3,type:Number},fill:{default:"none",type:String},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:1,type:[Number,String]}},computed:{strokeColor(){return this.stroke=="color('primary')"?color("primary"):this.stroke},currentPoints(){if(typeof this.points=="string"){return parseCoords(this.points)}if(Array.isArray(this.points)&&this.points.length){return parseCoords(this.points)}return this.points}},template:`\n  <g>\n    <rect\n      v-if="currentPoints.length"\n      v-for="p in currentPoints"\n      :x="p.x ? p.x - ((p.width ? p.width : width)  / 2) : x - (width / 2)"\n      :y="p.y ? p.y - ((p.width ? p.width : width) / 2) : y - (width / 2)"\n      :width="p.r || p.width || r || width"\n      :height="p.r || p.height || r || height"\n      :stroke="p.stroke || strokeColor"\n      :stroke-width="p.strokeWidth || strokeWidth"\n      stroke-linecap="round"\n      stroke-linejoin="round"\n      :fill="p.fill || fill"\n      :transform="transform"\n      :opacity="p.opacity || opacity"\n    />\n    <rect\n      v-if="!currentPoints.length"\n      :x="x - (width / 2)"\n      :y="y - (width / 2)"\n      :width="r || width"\n      :height="r || height"\n      :stroke="strokeColor"\n      :stroke-width="strokeWidth"\n      stroke-linecap="round"\n      stroke-linejoin="round"\n      :fill="fill"\n      :transform="transform"\n      :opacity="opacity"\n    />\n  </g>\n  `};var FPoint={mixins:[Object2d],description:`\n<f-scene grid>\n  <f-point points="0 0, 0.5 0.5, 1 1" />\n</f-scene>\n\n<f-scene grid>\n  <f-point\n    :points="\n      range(-4,4,0.05).map(x => ({ x, y: Math.cos(x) }))\n    "\n    :stroke="color('red')"\n  />\n  <f-point\n    :points="\n      range(-4,4,0.05).map(x => ({ x, y: Math.sin(x) }))\n    "\n    :stroke="color('blue')"\n  />\n</f-scene>\n  `,props:{x:{default:0,type:[Number,String]},y:{default:0,type:[Number,String]},points:{default:()=>[],type:[Array,String]},stroke:{default:"color('primary')",type:String},strokeWidth:{default:3,type:Number},position:{default:()=>({}),type:[Object,String]},rotation:{default:()=>({}),type:[Object,String]},scale:{default:()=>({}),type:[Object,String]},opacity:{default:1,type:Number}},computed:{strokeColor(){return this.stroke=="color('primary')"?color("primary"):this.stroke},currentPoints(){if(typeof this.points=="string"){return parseCoords(this.points)}else if(Array.isArray(this.points)&&this.points.length&&Array.isArray(this.points[0])){return parseCoords(this.points)}return this.points}},methods:{log:log},template:`\n    <g :transform="transform">\n      <f-line\n        v-if="!currentPoints.length"\n        :points="[{x, y},{x, y}]"\n        :stroke="strokeColor"\n        :stroke-width="strokeWidth"\n        stroke-linecap="round"\n        stroke-linejoin="round"\n        :opacity="opacity"\n      />\n      <f-line\n        v-if="currentPoints.length"\n        v-for="point,i in currentPoints"\n        :key="i"\n        :points="[{x: point.x, y: point.y},{x: point.x, y: point.y}]"\n        :stroke="strokeColor"\n        :stroke-width="strokeWidth"\n        stroke-linecap="round"\n        stroke-linejoin="round"\n        :opacity="opacity"\n      />\n    </g>\n    `};var FLine={mixins:[Object2d],description:`\n<f-scene>\n  <f-grid />\n  <f-line />\n  <f-line\n    :points="[\n      { x: -1.5, y: -1 },\n      { x: -1,   y: -1 },\n      { x: -1.5, y: -0.5 },\n    ]"\n  />\n  <f-line\n    :points="[\n      { x: -0.5, y: -1   },\n      { x: 0,    y: -1   },\n      { x: -0.5, y: -0.5 },\n    ]"\n    :closed="true"\n  />\n  <f-line\n    :points="[\n      { x: 0.5, y: -1   },\n      { x: 1,   y: -1   },\n      { x: 0.5, y: -0.5 },\n    ]"\n    :curved="true"\n  />\n  <f-line\n    :points="[\n      { x: 1.5, y: -1   },\n      { x: 2,   y: -1   },\n      { x: 1.5, y: -0.5 },\n    ]"\n    :closed="true"\n    :curved="true"\n  />\n</f-scene>\n  `,props:{x1:{default:0,type:[Number,String]},y1:{default:0,type:[Number,String]},x2:{default:0,type:[Number,String]},y2:{default:0,type:[Number,String]},points:{default:()=>[],type:[Array,String]},stroke:{default:"var(--primary)",type:String},strokeWidth:{default:3,type:[Number,String]},fill:{default:"none",type:String},closed:{default:false,type:Boolean},curved:{default:false,type:Boolean},tension:{default:false,type:[Boolean,Number]},opacity:{default:1,type:[Number,String]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object}},computed:{currentPoints(){if(typeof this.points=="string"){return parseCoords(this.points)}if(Array.isArray(this.points)&&this.points.length){if(Array.isArray(this.points[0])){return this.points.map(p=>({x:p[0],y:p[1]}))}return this.points}return this.points},path(){if(this.curved&&this.closed){return d3.line().x(d=>d.x).y(d=>d.y).curve(d3.curveCardinalClosed.tension(this.tension||0))}if(this.curved&&!this.closed){return d3.line().x(d=>d.x).y(d=>d.y).curve(d3.curveCardinal.tension(this.tension||0))}if(!this.curved&&this.closed){return d3.line().x(d=>d.x).y(d=>d.y).curve(d3.curveCardinalClosed.tension(this.tension||1))}return d3.line().x(d=>d.x).y(d=>d.y)}},template:`\n    <g :transform="transform">\n      <line\n        v-if="!currentPoints.length"\n        :x1="x1"\n        :y1="y1"\n        :x2="x2"\n        :y2="y2"\n        :stroke="stroke"\n        :stroke-width="strokeWidth"\n        stroke-linecap="round"\n        stroke-linejoin="round"\n        :fill="fill"\n        :opacity="opacity"\n      />\n      <path\n        v-if="currentPoints.length"\n        :d="path(currentPoints)"\n        :stroke="stroke"\n        :stroke-width="strokeWidth"\n        stroke-linecap="round"\n        stroke-linejoin="round"\n        :fill="fill"\n        :opacity="opacity"\n      />\n    </g>\n    `};var FCircle={mixins:[Object2d],description:`\n<f-scene>\n  <f-grid />\n  <f-circle />\n  <f-circle\n    :points="[{x: -0.5},{x: 0},{x: 0.5}]"\n    :r="0.1"\n  />\n</f-scene>  \n  `,props:{x:{default:0,type:[Number,String]},y:{default:0,type:[Number,String]},points:{default:()=>[],type:Array},r:{default:1,type:[Number,String]},stroke:{default:"color('primary')",type:String},strokeWidth:{default:3,type:[Number,String]},fill:{default:"none",type:String},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:1,type:[Number,String]}},computed:{strokeColor(){return this.stroke=="color('primary')"?color("primary"):this.stroke},currentPoints(){if(typeof this.points=="string"){return parseCoords(this.points)}if(Array.isArray(this.points)&&this.points.length){return parseCoords(this.points)}return this.points}},template:`\n    <f-group>\n    <circle\n      v-if="currentPoints.length"\n      v-for="p,i in currentPoints"\n      :key="i"\n      :cx="p.x || x"\n      :cy="p.y || y"\n      :r="p.r || r"\n      :stroke="p.stroke || strokeColor"\n      :stroke-width="p.strokeWidth || strokeWidth"\n      :fill="p.fill || fill"\n      :transform="transform"\n      :opacity="p.opacity || opacity"\n    />\n    <circle\n      v-if="!currentPoints.length"\n      :cx="x"\n      :cy="y"\n      :r="r"\n      :stroke="strokeColor"\n      :stroke-width="strokeWidth"\n      :fill="fill"\n      :transform="transform"\n      :opacity="opacity"\n    />\n    </f-group>\n  `};var FPolygon={mixins:[Object2d],example:`\n<f-scene>\n  <f-grid />\n  <f-polygon\n    :points="[\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: 0, y: 1 },\n    ]"\n  />\n  <f-polygon\n    :points="[\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: 0, y: 1 },\n    ]"\n    :position="{ x: 1, y: 1 }"\n    :rotation="{ z: 45 }"\n    :scale="{ x: 0.2, y: 0.2 }"\n  />\n</f-scene>\n  `,props:{points:{default:[],type:Array},stroke:{default:"color('primary')",type:String},strokeWidth:{default:3,type:Number},fill:{default:"none",type:String},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:1,type:[Number,String]}},computed:{strokeColor(){return this.stroke=="color('primary')"?color("primary"):this.stroke}},template:`\n    <f-line\n      :points="points"\n      :stroke="strokeColor"\n      :stroke-width="strokeWidth"\n      stroke-linecap="round"\n      stroke-linejoin="round"\n      :fill="fill"\n      :transform="transform"\n      :opacity="opacity"\n      :closed="true"\n    />\n  `};var FRegularpolygon={mixins:[Object2d],description:`\n<f-scene>\n  <f-regularpolygon />\n  <f-regularpolygon :count="3" />\n</f-scene>\n  `,props:{x:{default:false,type:[Number,String,Boolean]},y:{default:false,type:[Number,String,Boolean]},count:{default:6,type:[Number,String]},r:{default:1,type:[Number,String]},stroke:{default:"color('primary')",type:String},strokeWidth:{default:3,type:[Number,String]},fill:{default:"none",type:String},position:{default:()=>({}),type:[Object,String]},rotation:{default:()=>({}),type:[Object,String]},scale:{default:()=>({}),type:[Object,String]},opacity:{default:1,type:[Number,String]}},methods:{cpoints:cpoints},computed:{strokeColor(){return this.stroke=="color('primary')"?color("primary"):this.stroke},currentTransform(){const position=typeof this.position=="string"?this.parseTransform(this.position)[0]:this.position;return`${this.x||this.y?`translate(${this.x||0} ${this.y||0})`:`translate(${position.x||0} ${position.y||0})`} ${this.rotationTransform} ${this.scaleTransform}`}},template:`\n    <f-polygon\n      :points="cpoints(count,r)"\n      :stroke="strokeColor"\n      :stroke-width="strokeWidth"\n      stroke-linecap="round"\n      stroke-linejoin="round"\n      :fill="fill"\n      :transform="currentTransform"\n      :opacity="opacity"\n    />\n  `};var FText={description:`\nAdds a text to the \`f-scene\`.  \n\n<f-scene>\n  <f-text :fill="color('red')">x:0, y:0</f-text>\n  <f-point :stroke="color('red')" />\n</f-scene>\n  `,props:{x:{default:0,type:[Number,String]},y:{default:0,type:[Number,String]},fill:{default:"color('primary')",type:String}},computed:{fillColor(){return this.fill=="color('primary')"?color("primary"):this.fill}},template:`\n  <f-group :position="{x: x, y: y}">\n    <text\n      text-anchor="middle"\n      alignment-baseline="middle"\n      transform="scale(1,-1)"\n      :style="{\n        fontFamily: 'var(--font-mono)',\n        fill: fillColor\n      }"\n    >\n      <slot />\n    </text>\n  </f-group>\n  `};var FArtboard={description:`\n  \nA playground for generative vector graphics. Compared to the \`<f-scene>\` it is a standard \`svg\` document so the coordinate system and sizing is working in the expected way.\n\n\n<f-artboard width="400" height="400" grid>\n  <f-circle\n    v-for="r in range(0,300,10).reverse()"\n    x="200"\n    y="200"\n    :r="r"\n    :fill="hsl(r)"\n  />\n</f-artboard>\n  `,props:{width:{default:600,type:[Number,String]},height:{default:600,type:[Number,String]},grid:{default:false,type:Boolean},step:{default:25,type:[Number,String]}},template:`\n  <f-svg \n    :width="width"\n    :height="height"\n    class="f-artboard"\n  >\n    <f-group slot-scope="data">\n      <f-basegrid \n        v-if="grid"\n        :inner-width="width"\n        :inner-height="height"\n        :step="step"\n      />\n      <f-basegrid \n        v-if="grid"\n        :inner-width="width"\n        :inner-height="height"\n        :step="step * 4"\n      />\n      <slot :value="data.value" />\n    </f-group>\n  </f-svg>\n  `};var FGridPattern={mixins:[Object2d],description:`\nRepeats the contents in a 2D grid.\n\n<f-scene grid>\n  <f-grid-pattern>\n    <f-circle\n      slot-scope="data"\n      r="0.5"\n      :stroke="color('red')"\n    />\n  </f-grid-pattern>\n  <f-circle r="0.5" />  \n</f-scene>\n  `,props:{step:{default:1,type:[Number,String]},width:{default:4,type:[Number,String]},height:{default:4,type:[Number,String]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:1,type:Number}},methods:{range:range},template:`\n  <f-group\n    :transform="transform"\n    :opacity="opacity"\n  >\n    <f-group v-for="(x,i) in range(width / -2, width / 2, step)" :key="i" :position="{x,y:0}">\n      <f-group v-for="(y,j) in range(height / -2, height / 2, step)" :key="j" :position="{x:0,y}">\n        <slot :value="[i, j, (i * range(height / -2, height / 2, step).length) + j]" />\n      </f-group>\n    </f-group>\n  </f-group>  \n  `};var FShiftPattern={mixins:[Object2d],description:`\nRepeats the contents in a shifted rectangular grid.\n\n<f-scene grid>\n  <f-shift-pattern>\n    <f-box\n      slot-scope="data"\n      :stroke="color('red')"\n    />\n  </f-shift-pattern>\n  <f-box />\n</f-scene>\n  `,props:{step:{default:1,type:[Number,String]},width:{default:4,type:[Number,String]},height:{default:4,type:[Number,String]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:1,type:Number}},methods:{range:range},template:`\n  <f-group\n    :transform="transform"\n    :opacity="opacity"\n  >\n    <f-group v-for="(y,j) in range(width / -2, width / 2, step)" :key="j" :position="{x:0,y}">\n      <f-group v-for="(x,i) in range(height / -2, height / 2, step)" :key="i" :position="{x: j % 2 ? x + step / 2 : x,y:0}">\n        <slot :value="[i, j, (i * j) + i]" />\n      </f-group>\n    </f-group>\n  </f-group>  \n  `};var FHexPattern={mixins:[Object2d],description:`\nRepeats the contents in a hexagonal grid.\n\n<f-scene grid>\n  <f-hex-pattern>\n    <f-regularpolygon\n      slot-scope="data"\n      r="0.5"\n      :stroke="color('red')"\n    />\n  </f-hex-pattern>\n  <f-regularpolygon r="0.5" />\n</f-scene>\n  `,props:{step:{default:1,type:[Number,String]},width:{default:4,type:[Number,String]},height:{default:4,type:[Number,String]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:1,type:Number}},methods:{range:range,polarpoints:polarpoints},template:`\n  <f-group\n    :transform="transform"\n    :opacity="opacity"\n  >\n    <f-group v-for="(y,j) in range(width / -2,width / 2, step)" :key="j">\n      <f-group v-for="(x,i) in range(height / -2,height / 2, step)"\n        :key="i"\n        :position="{\n          x: polarpoints(6,0.5)[1].x * 2 * x - (y % 2 ? polarpoints()[1].x * 0.5 : 0),\n          y: (polarpoints(6,0.5)[1].y - 0.5) * y\n        }"\n      ><slot :value="[i, j, (i * j) + i]" />\n      </f-group>\n    </f-group>\n  </f-group>\n  `};var FCirclePattern={mixins:[Object2d],description:`\nRepeats elements along the circle.\n\n<f-scene grid>\n  <f-box />\n  <f-circle-pattern>\n    <f-box\n      slot-scope="data"\n      opacity="0.25"\n      :stroke="color('red')"\n    />\n  </f-circle-pattern>\n</f-scene>\n  `,props:{count:{default:6,type:[Number,String]},r:{default:1,type:[Number,String]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:1,type:[Number,String]}},methods:{polarpoints:polarpoints},template:`\n  <f-group\n    :transform="transform"\n    :opacity="opacity"\n  >\n    <f-group\n      v-for="(p,i) in polarpoints(count,r)"\n      :key="i"\n      :position="p"\n    >\n      <slot :value="i" />\n    </f-group>\n  </f-group>  \n  `};var FSpinPattern={mixins:[Object2d],description:`\nRepeats elements along the circle, rotating each towards the center of the circle.\n\n<f-scene grid>\n  <f-box />\n  <f-spin-pattern>\n    <f-box\n      slot-scope="data"\n      :stroke="color('red')"\n    />\n  </f-spin-pattern>\n</f-scene>\n  `,props:{count:{default:6,type:[Number,String]},r:{default:1,type:[Number,String]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:1,type:[Number,String]}},methods:{range:range},template:`\n  <f-group\n    :transform="transform"\n    :opacity="opacity"\n  >\n    <f-group\n      v-for="(a,i) in range(0,360,360 / count)"\n      :key="i"\n      :rotation="{z: a}"\n    >\n      <f-group :position="{x: r}">\n        <slot :value="i" />\n      </f-group>\n    </f-group>\n  </f-group>  \n  `};var FSlicePattern={mixins:[Object2d],description:`\nClips the children element and rotating each towards the center of the circle.\n\nWhen \`:count="2"\`, the children element is horizontally mirrored around x axis, similar to \`<f-mirror-x>\`\n\n<f-scene grid>\n  <f-box\n    :rotation="{z:10}"\n    opacity="0.25"\n  />\n  <f-slice-pattern>\n    <f-box\n      :rotation="{z:10}"\n      :stroke="color('red')"/>\n    />\n  </f-slice-pattern>\n</f-scene>\n  `,props:{count:{default:6,type:[Number,String]},r:{default:1,type:[Number,String]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:1,type:[Number,String]}},methods:{polarpoints:polarpoints,range:range},computed:{id1(){return`id1${Math.random()}`},id2(){return`id2${Math.random()}`}},template:`\n  <f-group\n    :transform="transform"\n    :opacity="opacity"\n  >\n    <defs>\n      <clipPath :id="id1">\n        <polygon\n          :points="[\n            {x: 0, y: 0},\n            {x: polarpoints(count,r)[0].x, y: polarpoints(count,r)[0].y },\n            {x: polarpoints(count,r)[1].x, y: polarpoints(count,r)[1].y }\n          ].map(p => p.x + ',' + p.y).join(' ')"\n        />\n      </clipPath>\n      <clipPath :id="id2">\n        <rect\n          x="0"\n          :y="-r"\n          :width="r"\n          :height="r * 2"\n        />\n      </clipPath>\n    </defs>\n    <f-group\n      v-if="count > 2"\n      v-for="(a,i) in range(0,360,360 / count)"\n      :key="i"\n      :rotation="{z: a}"\n      :clip-path="'url(#' + id1 + ')'"\n    >\n      <slot :value="i" />\n    </f-group>\n    <f-group v-if="count == 2">\n      <f-group :clip-path="'url(#' + id2 + ')'">\n        <slot :value="0" />\n      </f-group>\n      <f-group\n        :clip-path="'url(#' + id2 + ')'"\n        transform="scale(-1,1)"\n      >\n        <slot :value="1" />\n      </f-group>\n    </f-group>\n  </f-group>  \n  `};var FMirrorX={mixins:[Object2d],description:`\nMirrors children element around horizontal x axis.\n\n<f-scene grid>\n  <f-box\n    :rotation="{z:10}"\n    opacity="0.25"\n  />\n  <f-mirror-x>\n    <f-box\n      :rotation="{z:10}"\n      :stroke="color('red')"\n    />\n  </f-mirror-x>\n</f-scene>\n  `,props:{r:{default:1,type:[Number,String]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:1,type:[Number,String]}},computed:{id(){return"id"+Math.random()}},template:`\n  <f-group\n    :transform="transform"\n    :opacity="opacity"\n  >\n    <defs>\n      <clipPath :id="id">\n      <rect\n          :x="-r"\n          :y="0"\n          :width="r * 2"\n          :height="r"\n        />\n      </clipPath>\n    </defs>\n\n    <f-group :clip-path="'url(#' + id + ')'">\n      <slot :value="0" />\n    </f-group>\n    <f-group\n      :clip-path="'url(#' + id + ')'"\n      transform="scale(1,-1)"\n    >\n      <slot :value="1" />\n    </f-group>\n\n  </f-group>  \n  `};var FMirrorY={mixins:[Object2d],description:`\nMirrors children element around vertical y axis.\n\n<f-scene grid>\n  <f-box\n    :rotation="{z:10}"\n    opacity="0.25"\n  />\n  <f-mirror-y>\n    <f-box\n      :rotation="{z:10}"\n      :stroke="color('red')"/>\n  </f-mirror-y>\n</f-scene>\n  `,props:{r:{default:1,type:[Number,String]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:1,type:[Number,String]}},computed:{id(){return"id"+Math.random()}},template:`\n  <f-group\n    :transform="transform"\n    :opacity="opacity"\n  >\n    <defs>\n      <clipPath :id="id">\n        <rect\n          x="0"\n          :y="-r"\n          :width="r"\n          :height="r * 2"\n        />\n      </clipPath>\n    </defs>\n\n    <f-group :clip-path="'url(#' + id + ')'">\n      <slot :value="0" />\n    </f-group>\n    <f-group\n      :clip-path="'url(#' + id + ')'"\n      transform="scale(-1,1)"\n    >\n      <slot :value="1" />\n    </f-group>\n\n  </f-group>  \n  `};const Base={inject:["_baseUrl"],props:{baseUrl:{type:String,default(){return this._baseUrl}}},provide(){return{_baseUrl:this.baseUrl}},methods:{dispatchEvent(name,detail,options={}){let e=new CustomEvent(name,Object.assign(options,{detail:detail,bubbles:true,cancelable:true}));return this.$el.dispatchEvent(e)}},template:`\n    <div><slot/></div>\n  `};const Object3D={mixins:[Base],provide(){return{parentObj:this.curObj}},inject:["parentObj"],props:{name:{type:String},type:{type:String,default:"Object3D"},obj:{type:Object},scale:{type:[Object,Number,Array,String]},position:{type:[Object,Array,String]},rotation:{type:[Object,Array,String]}},watch:{scale:{deep:true,handler(v){this.setScale(v)}},position:{deep:true,handler(v){Object.assign(this.curObj.position,v)}},rotation:{deep:true,handler(v){const degV={x:v.x?deg2rad(v.x):0,y:v.y?deg2rad(v.y):0,z:v.z?deg2rad(v.z):0};Object.assign(this.curObj.rotation,degV)}},obj(obj){this.curObj=obj},curObj(obj,oldObj){this.unsetObj(oldObj);this.setObj(obj)}},data(){let curObj=this.obj;if(!curObj){curObj=new THREE[this.type]}return{curObj:curObj}},mounted(){this.setObj(this.curObj)},beforeDestroy(){this.unsetObj(this.curObj)},methods:{setObj(obj){obj.name=this.name||obj.name||obj.type;if(typeof this.scale=="string"){this.scale=parseCoords(this.scale)[0];this.scale.x=this.scale.x||1;this.scale.y=this.scale.y||1;this.scale.z=this.scale.z||1}this.setScale(this.scale);if(typeof this.position=="string"){this.position=parseCoords(this.position)[0]}Object.assign(obj.position,this.position);if(this.rotation){if(typeof this.rotation=="string"){this.rotation=parseCoords(this.rotation)[0]}const rotation={x:this.rotation.x?deg2rad(this.rotation.x):0,y:this.rotation.y?deg2rad(this.rotation.y):0,z:this.rotation.z?deg2rad(this.rotation.z):0};Object.assign(obj.rotation,rotation)}else{Object.assign(obj.rotation,this.rotation)}if(this.parentObj){this.parentObj.add(obj)}this.$emit("update:obj",obj)},unsetObj(obj){this.$emit("update:obj",null);if(this.parentObj){this.parentObj.remove(obj)}},setScale(v){if(v&&typeof v==="number"){v={x:v,y:v,z:v}}Object.assign(this.curObj.scale,v)}}};const Scene={mixins:[Object3D],inject:["global"],props:{obj:{type:Object}},data(){let curObj=this.obj;if(!curObj){curObj=new THREE.Scene}curObj.name=curObj.name||curObj.type;return{curObj:curObj}},mounted(){let scene=this.curObj;this.global.scene=scene;window.scene=scene}};const Renderer={provide(){return{parentObj:null,_baseUrl:null,global:this.global}},props:{size:{type:Object,required:true},obj:{type:Object},background:{type:String,default:"#ffffff"}},data(){let curObj=this.obj;if(!curObj){curObj=new THREE.SVGRenderer({antialias:true});curObj.setClearColor(this.background)}curObj.name=curObj.name||curObj.type;curObj.setSize(this.size.w,this.size.h);let global={};global.rendererSize=this.size;global.rendererDom=curObj.domElement;return{curObj:curObj,global:global}},mounted(){this.$refs.container.appendChild(this.curObj.domElement);this.animate()},methods:{animate(){requestAnimationFrame(this.animate);this.curObj.render(this.global.scene,this.global.camera)}},template:`\n  <div>\n    <slot></slot>\n    <div ref="container"></div>\n  </div>\n  `};const Camera={mixins:[Object3D],inject:["global"],props:{obj:{type:Object}},data(){let curObj=this.obj;const{w:w,h:h}=this.global.rendererSize;if(!curObj){curObj=new THREE.PerspectiveCamera(75,w/h,.1,1e3)}curObj.name=curObj.name||curObj.type;return{curObj:curObj}},mounted(){this.global.camera=this.curObj}};var FScene3={description:`\n3D scene with \`x y z\` coordinates ranging from \`-2 to 2\`.\n\nTechically it a [ThreeJS](https://threejs.org/) wrapper with custom SVG renderer.\n\n<f-animation-data>\n  <f-scene3 slot-scope="data">\n    <f-grid3\n      :rotation="{ x: data.value, y: data.value }"\n    />\n  </f-scene3>\n</f-animation-data>\n  `,components:{Renderer:Renderer,Scene:Scene,Camera:Camera},props:{width:{default:250,type:Number},height:{default:250,type:Number},cameraPosition:{default:()=>({x:0,y:0,z:2.63}),type:Object}},template:`\n  <Renderer :size="{ w: width, h: height }">\n    <Scene>\n      <Camera :position="cameraPosition" />\n      <slot />\n    </Scene>\n  </Renderer>\n  `};var FBox3={description:`\n<f-scene3>\n  <f-box3\n    :rotation="{ y: 45, x: 45 }"\n    :opacity="0.8"\n  />\n</f-scene3>  \n  `,mixins:[Object3D],props:{width:{default:1,type:Number},height:{default:1,type:Number},depth:{default:1,type:Number},stroke:{default:"",type:String},strokeWidth:{default:3,type:Number},fill:{default:"color('primary')",type:String},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},opacity:{default:1,type:Number},shading:{default:true,type:Boolean}},data(){let curObj=this.obj;if(!curObj){var geometry=new THREE.BoxGeometry(this.width,this.height,this.depth);curObj=new THREE.Mesh(geometry,this.shading?new THREE.MeshNormalMaterial({opacity:this.opacity,side:THREE.DoubleSide}):new THREE.MeshBasicMaterial({color:this.fill=="color('primary')"?color("primary"):this.fill,opacity:this.opacity,side:THREE.DoubleSide}))}curObj.name=curObj.name||curObj.type;return{curObj:curObj}}};var FGrid3={mixins:[Object3D],description:`\n<f-scene3>\n  <f-grid3\n    :rotation="{ y: 45, x: 45 }"\n    :scale="{ x: 0.5, y: 0.5, z: 0.5 }"\n  />\n</f-scene3>\n  `,props:{scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},opacity:{default:.2,type:Number}},methods:{range:range},template:`\n    <f-group3>\n    <f-group3\n      v-for="(rotation,i) in [{},{x:90},{y:90}]"\n      :key="i"\n      :rotation="rotation"\n    >\n    <f-line3\n      v-for="x,i in range(-2,2,1)"\n      :key="'x' + i"\n      :points="[{ x, y: -2},{ x, y: 2}]"\n      :stroke-width="1"\n      :opacity="x == 0 ? opacity * 2 : opacity"\n    />\n    <f-line3\n      v-for="y,j in range(-2,2,1)"\n      :key="'y' + j"\n      :points="[{ x: -2, y },{ x: 2, y }]"\n      :stroke-width="1"\n      :opacity="y == 0 ? opacity * 2 : opacity"\n    />\n    </f-group3>\n  </f-group3>\n  `};var FGroup3={mixins:[Object3D],description:`\n<f-scene3>\n  <f-grid3 />\n  <f-group3\n    :position="{ x: 1, y: 1 }"\n    :rotation="{ z: 45 }"\n    :scale="{ x: 0.2, y: 0.2, z: 0.2 }"\n    >\n      <f-box3 />\n  </f-group3>\n</f-scene3>\n  `,props:{type:{type:String,default:"Mesh"},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},provide(){return{meshVm:this}}};var FPoint3={mixins:[Object3D],description:`\n<f-scene3>\n  <f-point3 />\n  <f-group3\n    :rotation="{ y: 45, x: 45 }"\n    :scale="{ x: 0.5, y: 0.5, z: 0.5 }"\n  >\n  <f-grid3 />\n  <f-point3\n    :points="range(-4,4,0.05)\n    .map(x => ({ x, y: Math.cos(x), z: Math.sin(x) }))"\n    :stroke="color('red')"\n  />\n  <f-point3\n    :points="range(-4,4,0.05)\n    .map(x => ({ x, y: Math.sin(x), z: Math.cos(x) }))"\n    :stroke="color('blue')"\n  />\n  </f-group3>\n</f-scene3>\n  `,props:{x:{default:0,type:Number},y:{default:0,type:Number},z:{default:0,type:Number},points:{default:()=>[],type:[Array,String]},stroke:{default:"color('primary')",type:String},strokeWidth:{default:3,type:Number},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:1,type:Number}},computed:{strokeColor(){return this.stroke=="color('primary')"?color("primary"):this.stroke},currentPoints(){if(typeof this.points=="string"){return parseCoords(this.points)}if(Array.isArray(this.points)&&this.points.length){return parseCoords(this.points)}return this.points}},template:`\n    <f-group3>\n      <f-line3\n        v-if="!currentPoints.length"\n        :x1="x"\n        :y1="y"\n        :z1="z"\n        :x2="x"\n        :y2="y"\n        :z2="z"\n        :stroke="strokeColor"\n        :stroke-width="strokeWidth"\n        :opacity="opacity"\n      />\n      <f-line3\n        v-if="currentPoints.length"\n        v-for="point,i in currentPoints"\n        :key="i"\n        :points="[\n          {x: point.x, y: point.y, z: point.z},\n          {x: point.x, y: point.y, z: point.z}\n        ]"\n        :stroke="strokeColor"\n        :stroke-width="strokeWidth"\n        :opacity="opacity"\n      />\n    </f-group3>\n    `};var FLine3={mixins:[Object3D],description:`\n<f-scene3>\n  <f-group3\n    :rotation="{ y: 45, x: 45 }"\n    :scale="{ x: 0.5, y: 0.5, z: 0.5 }"\n  >\n  <f-grid3 />\n  <f-line3\n    :points="[\n      { x: 1, y:  1, z: 0 },\n      { x: 1, y:  0, z: 1 },\n      { x: 1, y: -1, z: 0 },\n      { x: 1, y: -2, z: 0 },\n    ]"\n  />\n  </f-group3>\n</f-scene3>\n  `,mixins:[Object3D],props:{x1:{default:0,type:Number},y1:{default:0,type:Number},z1:{default:0,type:Number},x2:{default:0,type:Number},y2:{default:0,type:Number},z2:{default:0,type:Number},points:{default:()=>[],type:Array},stroke:{default:"color('secondary')",type:String},strokeWidth:{default:3,type:[Number,String]},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},opacity:{default:3,type:[Number,String]}},data(){let curObj=this.obj;if(!curObj){const geometry=new THREE.Geometry;if(this.points.length){this.points.forEach(p=>{geometry.vertices.push(new THREE.Vector3(p.x||0,p.y||0,p.z||0))})}else{geometry.vertices.push(new THREE.Vector3(this.x1,this.y1,this.z1));geometry.vertices.push(new THREE.Vector3(this.x2,this.y2,this.z2))}const material=new THREE.LineBasicMaterial({color:new THREE.Color(this.stroke=="color('secondary')"?color("secondary"):this.stroke),linewidth:this.strokeWidth,opacity:this.opacity});curObj=new THREE.Line(geometry,material)}curObj.name=curObj.name||curObj.type;return{curObj:curObj}}};var FCircle3={mixins:[Object3D],description:`\n<f-scene3>\n  <f-group3\n    :rotation="{ y: 45, x: 45 }"\n    :scale="{ x: 0.5, y: 0.5, z: 0.5 }"\n  >\n    <f-grid3 />\n    <f-circle3 />\n  </f-group3>\n</f-scene3>\n  `,props:{r:{default:1,type:Number},stroke:{default:"color('primary')",type:String},strokeWidth:{default:3,type:Number},fill:{default:"",type:String},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:[Object,Number]},opacity:{default:1,type:Number},shading:{default:false,type:Boolean}},computed:{strokeColor(){return this.stroke=="color('primary')"?color("primary"):this.stroke}},template:`\n    <f-regularpolygon3\n      :r="r"\n      :count="64"\n      :stroke="strokeColor"\n      :strokeWidth="strokeWidth"\n      :fill="fill"\n      :opacity="opacity"\n    />\n  `};var FTriangle3={description:`\nThe key building block of 3D graphics, this component draws a triangle in 3D space. It accepts three 3D coordinates in <code>:points</code> array.\n\n<f-scene3>\n  <f-group3\n    :rotation="{ y: 45, x: 45 }"\n    :scale="{ x: 0.5, y: 0.5, z: 0.5 }"\n  >\n    <f-grid3 />\n    <f-triangle3\n      :points="[\n        { x: 1, y: 1,  z: 0 },\n        { x: 1, y: 0,  z: 1 },\n        { x: 1, y: -1, z: 0 },\n      ]" \n    /> \n  </f-group3>\n</f-scene3>\n  `,mixins:[Object3D],props:{points:{default:[],type:Array},fill:{default:"color('primary')",type:String},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},opacity:{default:1,type:[Number,String]},shading:{default:false,type:Boolean}},data(){let curObj=this.obj;if(!curObj){var geometry=new THREE.Geometry;this.points.forEach(p=>{geometry.vertices.push(new THREE.Vector3(p.x||0,p.y||0,p.z||0))});geometry.faces.push(new THREE.Face3(0,1,2));geometry.computeFaceNormals();curObj=new THREE.Mesh(geometry,this.shading?new THREE.MeshNormalMaterial({opacity:this.opacity,side:THREE.DoubleSide}):new THREE.MeshBasicMaterial({color:this.fill=="color('primary')"?color("primary"):this.fill,opacity:this.opacity,side:THREE.DoubleSide}))}curObj.name=curObj.name||curObj.type;return{curObj:curObj}}};const InternalPolygon={mixins:[Object3D],props:{points:{default:[],type:Array},fill:{default:"color('primary')",type:String},opacity:{default:1,type:Number}},data(){let curObj=this.obj;if(!curObj){var vectorPoints=this.points.map(p=>new THREE.Vector3(p.x||0,p.y||0,p.z||0));var shape=new THREE.Shape(vectorPoints);var geometry=new THREE.ShapeGeometry(shape);curObj=new THREE.Mesh(geometry,new THREE.MeshBasicMaterial({color:this.fill=="color('primary')"?color("primary"):this.fill,opacity:this.opacity,side:THREE.DoubleSide}))}curObj.name=curObj.name||curObj.type;return{curObj:curObj}}};var FPolygon3={mixins:[Object3D],description:`\nDraws a 2D polygon on a plane in 3D space, accepts 2D coordinates in <code>:points</code> array.\n\n<f-scene3>\n  <f-group3\n    :rotation="{ y: 45, x: 45 }"\n    :scale="{ x: 0.5, y: 0.5, z: 0.5 }"\n  >\n    <f-grid3 />\n    <f-polygon3\n      :points="[\n        { x:  1, y:  1 },\n        { x:  1, y: -1 },\n        { x: -1, y: -1 },\n        { x: -1, y:  1 },\n      ]"\n    />\n  </f-group3>\n</f-scene3>\n  `,components:{InternalPolygon:InternalPolygon},props:{points:{default:[],type:Array},stroke:{default:"color('primary')",type:String},strokeWidth:{default:"3",type:[Number,String]},fill:{default:"",type:String},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},opacity:{default:1,type:Number}},computed:{linePoints(){return this.points.concat(this.points[0]).map(p=>{p.z=0;return p})},strokeColor(){return this.stroke=="color('primary')"?color("primary"):this.stroke}},template:`\n    <f-group3>\n      <InternalPolygon :points="points" :fill="fill" :opacity="opacity" />\n      <f-line3 :points="linePoints" :stroke="strokeColor" :strokeWidth="strokeWidth" :opacity="opacity" />\n    </f-group3>\n  `};var FRegularpolygon3={mixins:[Object3D],description:`\n<f-scene3>\n  <f-group3\n  :rotation="{ y: 45, x: 45 }"\n  :scale="{ x: 0.5, y: 0.5, z: 0.5 }"\n  >\n    <f-grid3 />\n    <f-regularpolygon3 opacity="0.5" />\n    <f-regularpolygon3 :count="3" />\n  </f-group3>\n</f-scene3>\n  `,props:{count:{default:6,type:Number},r:{default:1,type:Number},stroke:{default:"color('primary')",type:String},strokeWidth:{default:3,type:Number},fill:{default:"",type:String},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:[Object,Number]},opacity:{default:1,type:[Number,String]},shading:{default:false,type:Boolean}},computed:{strokeColor(){return this.stroke=="color('primary')"?color("primary"):this.stroke}},template:`\n  <f-hedron3\n    :count="count"\n    :r="r"\n    :stroke="strokeColor"\n    :stroke-width="strokeWidth"\n    :fill="fill"\n    :opacity="opacity"\n    :shading="shading"\n  />\n  `};var FHedron3={mixins:[Object3D],description:`\n  <f-animation-data\n    :duration="1000 * 20"\n  >\n  <f-scene3 slot-scope="data">\n    <f-group3\n      :rotation="{\n        x: data.value,\n        y: data.value\n      }"\n    >\n      <f-hedron3\n        :count="6"\n        :height="1"\n        :shading="true"\n      />\n    </f-group3>\n  </f-scene3>\n  </f-animation-data>\n  `,methods:{cpoints:cpoints},props:{count:{default:6,type:Number},r:{default:1,type:Number},height:{default:0,type:Number},heightStrokeWidth:{default:0,type:Number},stroke:{default:"",type:String},strokeWidth:{default:3,type:Number},fill:{default:"color('primary')",type:String},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:[Object,Number]},opacity:{default:1,type:[Number,String]},shading:{default:false,type:Boolean}},computed:{points(){return cpoints(this.count,this.r)}},template:`\n    <f-group3>\n      <f-triangle3\n        v-for="(p,i) in points"\n        :key="'a' + i"\n        :points="[\n          {x: p.x, y: p.y, z: 0},\n          {\n            x: points[i == points.length - 1 ? 0 : i + 1].x,\n            y: points[i == points.length - 1 ? 0 : i + 1].y,\n            z: 0\n          },\n          {x: 0, y: 0, z: 0}\n        ]"\n        :fill="fill"\n        :opacity="opacity"\n        :shading="shading"\n      />   \n      <f-triangle3\n        v-for="(p,i) in points"\n        :key="'b' + i"\n        :points="[\n          {x: p.x, y: p.y, z: 0},\n          {\n            x: points[i == points.length - 1 ? 0 : i + 1].x,\n            y: points[i == points.length - 1 ? 0 : i + 1].y,\n            z: 0\n          },\n          {x: 0, y: 0, z: height}\n        ]"\n        :fill="fill"\n        :opacity="opacity"\n        :shading="shading"\n      />\n      <f-line3\n        :points="points.concat(points[0])"\n        :stroke="stroke"\n        :strokeWidth="strokeWidth"\n        :opacity="opacity"\n      />\n      <f-line3\n        v-if="heightStrokeWidth"\n        v-for="p,i in points"\n        :key="i"\n        :points="[\n          {x: p.x, y: p.y, z: 0},\n          {x: 0, y: 0, z: height}\n        ]"\n        :stroke="stroke"\n        :strokeWidth="heightStrokeWidth"\n        :opacity="opacity"\n      />\n      </f-group3>\n  `};var FPolyhedron3={description:`\n<f-scene3>\n  <f-polyhedron3\n    v-for="(hedron,i) in [\n      'Tetrahedron',\n      'Octahedron',\n      'Icosahedron',\n      'Dodecahedron'\n    ]"\n    :key="i"\n    :hedron="hedron"\n    :position="{x: i - 1.5}"\n    :r="0.5"\n  />\n</f-scene3>  \n  `,mixins:[Object3D],props:{hedron:{default:"Icosahedron",type:String},r:{default:1,type:Number},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},data(){let curObj=this.obj;if(!curObj){var geometry=new THREE[this.hedron+"Geometry"](this.r,0);curObj=new THREE.Mesh(geometry,new THREE.MeshNormalMaterial({flatShading:true,opacity:.8,side:THREE.DoubleSide}))}curObj.name=curObj.name||curObj.type;return{curObj:curObj}}};var FFade={mixins:[Css],description:`\nFading transition\n\n<f-buttons-data :buttons="['On', 'Off']">\n  <h3 slot-scope="data">\n    <f-fade v-if="!data.value">Fading like a flower</f-fade>\n  </h3>\n</f-buttons-data>  \n  `,template:`\n  <transition appear name="fade">\n    <div><slot /></div>\n  </transition>\n  `,css:`\n  .fade-enter-active {\n    transition: all 1s linear;\n  }\n  .fade-leave-active {\n    transition: all 1s linear;\n  }\n  .fade-enter, .fade-leave-to {\n    opacity: 0;\n  }\n  `};var FBounce={mixins:[Css],description:`\nBounce transition\n\n<f-buttons-data :buttons="['On', 'Off']">\n  <h3 slot-scope="data">\n    <f-bounce v-if="!data.value">Bounce like a butterfly</f-bounce>\n  </h3>\n</f-buttons-data>  \n  `,template:`\n  <transition appear name="bounce">\n    <div><slot /></div>\n  </transition>\n  `,css:`\n  .bounce-enter-active {\n    animation: bounce-in .4s;\n  }\n  .bounce-leave-active {\n    animation: bounce-in .4s reverse;\n  }\n  .bounce-enter, .bounce-leave-to {\n    transform: scale(0);\n  }\n  \n  @keyframes bounce-in {\n    0% {\n      transform: scale(0);\n    }\n    50% {\n      transform: scale(1.2);\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n  \n  `};var FArrayData={description:`\n<f-array-data :length="3">\n  <f-scene slot-scope="data">\n  <circle\n    v-for="(value,x) in data.value"\n    :key="x"\n    :cx="x - 1"\n    r="0.5"\n    :fill="value ? 'var(--red)' : 'var(--primary)'"\n    @click="data.update(1 - value, x)"\n  />\n  </f-scene>\n</f-array-data>\n\n<f-array-data :length="7" :dimensions="2">\n  <f-scene slot-scope="data">\n  <f-group v-for="(col, x) in data.value" :key="x">\n  <f-box\n    v-for="(value, y) in col"\n    :key="y"\n    :x="x / 2 - 1.2"\n    :y="y / 2 - 1.2"\n    width="0.49"\n    height="0.49"\n    :fill="value ? 'var(--red)' : 'var(--primary)'"\n    @click.native="data.update(1 - value, x, y)"\n  />\n  </f-group>\n  </f-scene>\n</f-array-data>\n\n<f-array-data :length="3" :map="(_,i) => i">\n  <pre slot-scope="data">{{ data }}</pre>\n</f-array-data>\n  `,props:{length:{default:1,type:Number},dimensions:{default:1,type:Number},map:{default:d=>d,type:Function}},methods:{onUpdate(newValue,x,y=-1,z=-1){if(y>-1&&z>-1){this.$set(this.maxValue[x][y],z,newValue)}if(y>-1&&z==-1){this.$set(this.maxValue[x],y,newValue)}if(y==-1&&z==-1){this.$set(this.maxValue,x,newValue)}}},created(){if(this.dimensions==3){this.maxValue=Array.from({length:1e3}).map(_=>Array.from({length:1e3}).map(_=>Array.from({length:1e3}).map(_=>0)))}if(this.dimensions==2){this.maxValue=Array.from({length:1e3}).map(_=>Array.from({length:1e3}).map(_=>0))}if(this.dimensions==1){this.maxValue=Array.from({length:1e3}).map(_=>0)}},computed:{value(){if(this.dimensions==3){return this.maxValue.slice(0,this.length).map(x=>x.slice(0,this.length).map(y=>y.slice(0,this.length).map(this.map)))}if(this.dimensions==2){return this.maxValue.slice(0,this.length).map(x=>x.slice(0,this.length).map(this.map))}if(this.dimensions==1){return this.maxValue.slice(0,this.length).map(this.map)}}},data:()=>({maxValue:[]}),template:`\n  <div>\n    <slot :value="value" :update="onUpdate" /> \n  </div>\n  `};var FBufferData={description:`\n<f-buffer-data length="10" :map="() => [0,0]">\n  <f-scene slot-scope="bData" grid>\n    <f-group slot-scope="sData">\n      <f-circle\n        v-for="(p,i) in bData.value"\n        :key="i"\n        :x="p[0]"\n        :y="p[1]"\n        r="0.25"\n        :fill="color('white')"\n        :opacity="scale(i,0,9,0,1)"\n      />\n      <f-box\n        @mousemove.native="\n          bData.add([sData.value[0],sData.value[1]])\n        "\n        fill="rgba(0,0,0,0)"\n        width="4"\n        height="4"\n        stroke="none"\n      />\n    </f-group>\n  </f-scene>\n</f-buffer-data>\n  `,props:{length:{default:3,type:[Number,String]},map:{default:d=>0,type:Function}},methods:{onAdd(value){this.buffer.shift();this.buffer.push(value)}},data:function(){return{buffer:Array.from({length:this.length}).map(this.map)}},template:`\n  <div>\n    <slot :value="buffer" :add="onAdd" /> \n  </div>\n  `};var FAnimationData={description:`\nAn animation component, based on [AnimeJS](https://github.com/juliangarnier/anime) library.\n\nSupports most of the animation options AnimeJS provides.\n\nSee also avabilable [easing functions](https://github.com/juliangarnier/anime#built-in-functions). \n\n<f-animation-data :to="99">\n  <h1\n    slot-scope="data"\n    class="bullet"\n  >\n      {{ Math.floor(data.value) }}\n  </h1>\n</f-animation-data>\n  `,props:{from:{default:0,type:Number},to:{default:360,type:Number},duration:{default:1e4,type:Number},playing:{default:true,type:Boolean},reset:{default:false,type:Boolean},loop:{default:true,type:Boolean},alternate:{default:false,type:Boolean},easing:{default:"linear",type:String}},data:()=>({value:0}),mounted(){this.value=this.from;const a=anime({targets:this,duration:this.duration,value:this.to,loop:this.loop,direction:this.alternate?"alternate":null,easing:this.easing,autoplay:false});this.$watch("playing",playing=>{if(playing){a.play()}else{if(this.reset){a.reset()}a.pause()}},{immediate:true})},render(){return this.$scopedSlots.default?this.$scopedSlots.default({value:this.value}):""}};var FButtonsData={description:`\nWrapper component, adding a set of buttons on below the content and passing the current button index as <code>data.value</code>.\n\n<f-buttons-data :buttons="['Eins', 'Zwei', 'Polizei']">\n  <h1 slot-scope="data" class="bullet">{{ data.value + 1 }}</h1>\n</f-buttons-data>\n  `,props:{buttons:{default:[],type:Array},value:{default:0,type:Number}},data:function(){return{innerValue:this.value}},template:`\n    <div>\n      <f-buttons\n        v-model="innerValue"\n        :buttons="buttons"\n        style="margin-bottom: 1rem;"\n      />\n      <slot :value="innerValue" />\n    </div>\n  `};var FRgbData={description:`\n  Sliders for <code>r g b</code> color values.\n\n  <f-rgb-data r="102" g="51" b="153">\n  <f-scene slot-scope="data">\n    <f-circle :fill="rgb(...data.value)" />\n  </f-scene>\n</f-rgb-data>\n  `,props:{r:{default:128,type:[Number,String]},g:{default:128,type:[Number,String]},b:{default:128,type:[Number,String]}},template:`\n<f-slider-data :sliders="[\n  { title: 'R', to: 255, value: r },\n  { title: 'G', to: 255, value: g },\n  { title: 'B', to: 255, value: b },\n]">\n  <template slot-scope="data">\n    <slot :value="data.value" />\n  </template>\n</f-slider-data>\n  `};var FHslData={tag:"Data",description:`\nSliders for <code>h s l</code> color values.\n\n<f-hsl-data h="270" s="50" l="40">\n  <f-scene slot-scope="data">\n    <f-circle :fill="hsl(...data.value)" />\n  </f-scene>\n</f-hsl-data>\n  `,props:{h:{default:0,type:[Number,String]},s:{default:100,type:[Number,String]},l:{default:50,type:[Number,String]}},template:`\n<f-slider-data :sliders="[\n  { title: 'Hue', to: 360, value: h, },\n  { title: 'Saturation', to: 100, value: s },\n  { title: 'Lightness', to: 100, value: l },\n]">\n    <template slot-scope="data">\n      <slot :value="data.value" />\n    </template>\n  </f-slider-data>\n  `};var FSliderData={description:`\nAdds a slider next to the content and passing the slider value as <code>data.value</code> \n\n<f-slider-data>\n  <h1 class="bullet" slot-scope="data">\n    {{ data.value }}\n  </h1>\n</f-slider-data>\n\n<f-slider-data :sliders="[\n  { title: 'X', from: -2, to: 2, value: 0, float: true },\n  { title: 'Y', from: -2, to: 2, value: 0, float: true },\n]">\n  <f-scene slot-scope="data">\n    <f-grid />\n    <f-circle :position="{\n      x: data.value[0],\n      y: data.value[1]\n    }" />\n  </f-scene>\n</f-slider-data>\n  `,props:{value:{default:0,type:[Number,String]},title:{default:"Value",type:String},from:{default:0,type:[Number,String]},to:{default:360,type:[Number,String]},step:{default:1,type:[Number,String]},float:{default:false,type:Boolean},sliders:{default:()=>[],type:[Array]}},data:function(){return{innerValue:this.value,innerValues:this.sliders.length?this.sliders.map(v=>v.value?v.value:0):null}},template:`\n    <div>\n      <div v-if="sliders.length" v-for="(v,i) in sliders" :key="i">\n        <label>{{ v.title ? v.title : 'Values ' + i }} <code>{{ innerValues[i] }}</code></label>\n        <input\n          style="margin-bottom: 1rem;"\n          type="range"\n          v-model="innerValues[i]"\n          :min="v.from || this.from"\n          :max="v.to || this.to"\n          :step="v.step ? v.step : this.step ? this.step : v.float ? 0.000001 : 1"\n        />\n      </div>\n      <slot v-if="sliders.length" :value="innerValues" />\n      <div v-if="!sliders.length">\n        <label>{{ title }} <code>{{ innerValue }}</code></label>\n        <input style="margin-bottom: 1rem;" type="range" v-model="innerValue" :min="from" :max="to" :step="step ? step : float ? 0.001 : 1" />\n      </div>\n      <slot v-if="!sliders.length" :value="innerValue" />\n    </div>\n  `};var FDragData={description:`\n<f-scene grid>\n  <f-drag-data\n    slot-scope="sData"\n    :points="[{ x: 1, y: 0 },{ x: 0, y: 1 },{ x: -1, y: -1 }]"\n    :value="sData.value"\n  >\n    <f-line\n      slot-scope="dData"\n      :points="dData.value"\n      closed\n    />\n  </f-drag-data>\n</f-scene>  \n  `,props:{points:{default:[],type:Array},value:{default:[],type:Array},step:{default:false,type:Boolean}},data:()=>({currentPoints:[]}),methods:{handleDown(i){this.$set(this.currentPoints[i],"pressed",true)},handleUp(i){this.$set(this.currentPoints[i],"pressed",false)}},computed:{finalPoints(){return this.currentPoints.map((p,i)=>{if(p.pressed){p.x=this.step?snapToGrid(this.value[0],this.step):this.value[0];p.y=this.step?snapToGrid(this.value[1],this.step):this.value[1]}return p})}},mounted(){this.currentPoints=this.points},template:`\n    <f-group>\n      <slot :value="finalPoints" />\n      <f-circle \n        v-for="(p,i) in finalPoints"\n        :key="i"\n        :x="p.x"\n        :y="p.y"\n        :r="p.pressed ? 0.22  : 0.2"\n        fill="rgba(255,255,255,0.95)"\n        @mousedown.native="handleDown(i)"\n        @touchstart.native="handleDown(i)"\n        @mouseup.native="handleUp(i)"\n        @touchend.native="handleDown(i)"\n        style="cursor: move;"\n      />        \n    </f-group>\n  `};var FFetchData={description:`\nFetches data via AJAX.\n\n<f-fetch-data\n  url="https://sofetch.glitch.me/https://samples.openweathermap.org/data/2.5/weather?q=Berlin,de&appid=b6907d289e10d714a6e88b30761fae22"\n  type="json"\n>\n  <pre\n    style="width: 250px"\n    slot-scope="data"\n    v-html="'Berlin weather: ' + data.value.weather[0].main"\n  />\n</f-fetch-data>\n  `,data:()=>({value:null,loaded:false}),props:{url:{default:"",type:String},type:{default:"text",type:String}},mounted(){fetch(this.url).then(res=>{if(this.type=="json"){return res.json()}return res.text()}).then(res=>{this.value=res;this.loaded=true}).catch(error=>console.log(error))},render(){return this.loaded?this.$scopedSlots.default?this.$scopedSlots.default({value:this.value}):"":""}};var FSheetData={description:`\nFetches data from Google Sheets.\n\n<f-sheet-data id="110RcQmdpOkFcS2KIlahEh8QezwH2cwnihDiV__ZiYqk">\n<f-scene slot-scope="data">\n  <rect \n    v-for="(v,i) in data.value"\n    :x="scale(i,0,data.value.length,-1.9,1.9)"\n    :y="-2"\n    :height="scale(v.age,0,100,0,2.9)"\n    :width="(4 / data.value.length) - 0.1"\n    fill="var(--red)"\n    rx="0.05"\n  />  \n</f-scene>\n</f-sheet-data>\n  `,data:()=>({value:null,loaded:false}),props:{id:{default:"",type:String}},mounted(){if(this.id){fetch(`https://spreadsheets.google.com/feeds/list/${this.id}/od6/public/values?alt=json`).then(res=>res.json()).then(res=>{this.value=parseSheet(res);this.loaded=true})}},render(){return this.loaded?this.$scopedSlots.default?this.$scopedSlots.default({value:this.value}):"":""}};var FRotationData={description:`\nSliders for <code>x y z</code> coordinate data in degrees from \`0\` to \`180\`.\n\n<f-rotation-data>\n  <f-scene3 slot-scope="data">\n    <f-box3 :rotation="{\n      x: data.value[0],\n      y: data.value[1],\n      z: data.value[2]\n    }" />\n  </f-scene3>\n</f-rotation-data>\n  `,methods:{deg2rad:deg2rad},template:`\n  <f-slider-data :sliders="[\n    { title: 'X axis', to: 180, float: true },\n    { title: 'Y axis', to: 180, float: true },\n    { title: 'Z axis', to: 180, float: true },\n  ]">\n    <template slot-scope="data">\n      <slot :value="data.value" />\n    </template>\n  </f-slider-data>\n  `};var FReceiveData={props:{name:{default:"value",type:String}},data:()=>({value:null}),mounted(){if(this.$global){this.$global.$on(this.name,value=>this.value=value)}},template:`\n    <div>\n      <slot :value="value" />\n    </div>\n  `};var FKeyboardData={props:{keys:{default:[],type:Array}},description:`\n<p>Press <b>a</b> on the keyboard:</p>\n<f-keyboard-data :keys="['a']">\n  <f-buttons slot-scope="data" :buttons="['a']" :value="1 - data.value[0]"/>\n</f-keyboard-data>\n  `,data:()=>({values:[]}),mounted(){this.values=this.keys.map(_=>0);document.addEventListener("keydown",e=>{this.keys.forEach((k,i)=>{if(e.key==k){this.$set(this.values,i,1-this.values[i])}})})},template:`\n    <slot :value="values" />\n  `};var FKeyboard={props:{code:{default:"a",type:String},alt:{default:false,type:[Boolean,String]},ctrl:{default:false,type:[Boolean,String]}},description:`\n\nListens keypresses and emits \`@keydown\` and \`@keyup\` events.\n\n<f-keyboard\n  code="a"\n  ctrl\n  alt\n  v-on:keydown="set('keyboard', 1 - get('keyboard', 0))"\n/>\n\nPress <var :class="['gray','red'][get('keyboard',0)]">Ctrl + Alt + a</var>\n\n  `,computed:{parsedCode(){if(this.code=="top"||this.code=="right"||this.code=="bottom"||this.code=="left"){return`Arrow${titleCase(this.code)}`}return`Key${titleCase(this.code)}`}},mounted(){document.addEventListener("keydown",e=>{if((e.altKey||!this.alt)&&(e.ctrlKey||!this.ctrl)&&e.code==this.parsedCode){this.$emit("keydown")}});document.addEventListener("keyup",e=>{if((e.altKey||!this.alt)&&(e.ctrlKey||!this.ctrl)&&e.code==this.parsedCode){this.$emit("keyup")}})},render(){return}};var FMath={mixins:[Css],description:`\nTypesetting math equations in classic [LaTeX](https://katex.org/docs/supported.html) format.\n\nTecnically the framework uses [KaTeX](https://github.com/Khan/KaTeX) library with addional features such as colorized variables and simple multiline support.\n\n<f-math>\n  a = 10\n  b = a^2 + 100\n  c = \\frac{a}{b} = \\frac{10}{a^2 + 100}\n</f-math>\n\nWhen using live variables, it is recommended to set a \`:update\` prop that triggers instant re-rendering of the equation:\n\n<f-slider-data>\n  <f-math slot-scope="data" :update="data.value">\n    a = 10\n    b = a^2 + {{ data.value }}\n    c = \\frac{a}{b} = \\frac{10}{a^2 + 100}\n  </f-math>\n</f-slider-data>\n  `,props:["update"],data:()=>({math:0,timer:null}),methods:{renderMath(){this.math=katex.renderToString(this.$slots.default[0].text.trim().replace(/\n+/g,"\\newline"),{throwOnError:false}).replace(/background\-color\:red/g,"background-color:"+color("red")).replace(/background\-color\:orange/g,"background-color:"+color("orange")).replace(/background\-color\:yellow/g,"background-color:"+color("yellow")).replace(/background\-color\:purple/g,"background-color:"+color("purple")).replace(/background\-color\:blue/g,"background-color:"+color("blue")).replace(/background\-color\:green/g,"background-color:"+color("green")).replace(/background\-color\:gray/g,"background-color:"+color("gray"))}},mounted(){this.renderMath();this.timer=setInterval(()=>this.renderMath(),500);this.$watch("update",value=>this.renderMath())},unmounted(){clearInterval(this.timer)},template:`\n    <div v-html="math" />\n  `,css:`\n  .katex {\n    font-size: 1.3em;\n    color: var(--primary);\n    padding: 1rem 2rem;\n    display: block;\n  }\n  .katex .colorbox {\n    border-radius: 3px;\n    color: var(--white);\n  }\n  .katex .boxpad {\n    padding: 0;\n  }\n  .katex .boxpad .mord {\n    color: var(--white);\n    font-size: calc(var(--base) * 2);\n    font-family: var(--font-sansserif);\n  }\n  `};var FSidebar={description:`\n<f-sidebar src="../README.md"><div class="button_primary">Want to get started?</div></f-sidebar>\n\nOr you really want to <f-sidebar src="../README.md">get started</f-sidebar>?  \n`,props:{src:{default:"",type:String},width:{default:"50vw",type:String}},data:()=>({open:false}),template:`\n    <span>\n      <a style="color: var(--blue); border-bottom: 2px dotted var(--blue); cursor: help;" @click.prevent="open = !open"><slot /></a>\n      <div v-if="open" style="\n        position: fixed;\n        top: 0px;\n        right: 0px;\n        bottom: 0px;\n        background: var(--white);\n        border-left: var(--border-width) solid var(--primary);\n        overflowY: auto;\n        box-shadow: calc(50vw * -1) 0 rgba(0,0,0,0.15);\n        zIndex: 1000;\n      "\n      :style="{\n        width: width,\n        boxShadow: 'calc(100vw - ' + width + ' * -1) 0 rgba(0,0,0,0.15)'\n      }">\n        <div\n          @click="open = false"\n          style="\n            cursor: pointer;\n            position: fixed;\n            top: 1rem;\n            right: 1rem;\n        ">✕</div>\n        <f-fetch-data :url="src">\n          <f-content-document\n            slot-scope="data"\n            :content="data.value"\n            style="font-size: 0.8em;"\n          />\n        </f-fetch-data>\n      </div>\n</span>\n  `};var FInline={mixins:[Css],description:`\nInline layout component.\n\n<f-inline>\n  <button>Button 1</button>\n  <button>Button 2</button>\n</f-inline>\n  `,template:`\n  <div class="f-inline">\n    <slot />\n  </div>\n  `,css:`\n  .f-inline {\n    display: flex;\n    align-items: center;\n  }\n  .f-inline > * {\n    margin: 0 var(--base) 0 0;\n  }\n  .f-inline > *:last-child {\n    margin: 0;\n  }\n  p .f-inline {\n    margin-bottom: var(--base2);\n  }\n  @media (max-width: 800px) {\n    .f-inline {\n      display: block;\n    }\n    .f-inline > * {\n      margin: 0 0 var(--base);\n    }\n  }\n  `};var FCard={description:`\n\n<f-card>Some content here</f-carc>\n\n<f-card\n  title="Title"\n  subtitle="Subtitle"\n  height="calc(var(--base) * 20)"\n  color="var(--white)"\n  background="var(--red)"\n>\n  Some content here\n</f-card>\n  `,props:{title:{default:"",type:String},subtitle:{default:"",type:String},background:{default:"var(--tertiary)",type:String},color:{default:"var(--primary)",type:String},width:{default:"",type:String},height:{default:"",type:String}},template:`\n    <div\n      style="\n        border-radius: var(--border-radius);\n        padding: var(--base2);\n\n      "\n      :style="{\n        color,\n        background,\n        width,\n        height\n      }"\n    >\n      <div style="\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        width: 100%;\n      ">\n        <h4\n          style="margin: 0;"\n          :style="{ color }"\n          v-html="title"\n        />\n        <small\n          v-if="subtitle"\n          :style="{ color }"\n        >{{ subtitle }}</small>\n      </div>\n      <slot />\n    </div>\n    `};var FHr={description:`\nHorizontal separator line\n\n<f-hr/>  \n  `,template:`\n    <div style="\n      height: 0;\n      border-bottom: 3px solid var(--primary);\n    ">\n    &nbsp;\n    </div>\n  `};var FVr={description:`\nVertical separator line\n\n<f-vr/>  \n  `,template:`\n    <div style="\n      display: flex;\n      width: 0;\n      border-right: 3px solid var(--primary);\n    ">\n    &nbsp;\n    </div>\n  `};var FRender={props:{content:String},data:()=>({render:null,someVariable:0}),methods:Object.assign({},utils),mounted(){this.$watch("content",value=>{const template=Vue.compile(value);this.render=template.render;this.$options.staticRenderFns=[];this._staticTrees=[];for(var i in template.staticRenderFns){this.$options.staticRenderFns.push(template.staticRenderFns[i])}},{immediate:true})},render:function(h){return this.render?this.render():h()}};var FMarkdown={components:{FRender:FRender},props:["content"],methods:{marked:marked},computed:{processedContent(){return this.content.replace(/(<[^>]+>)/g,w=>w.replace(/(\n|[\n])/g," ").replace(/\s+/g," "))}},template:`\n  <div>\n    <FRender :content="'<div>' + marked(processedContent, { breaks: true }) + '</div>'" />\n  </div>\n  `};var FTable={components:{FMarkdown:FMarkdown},description:`\nA \`<table>\`, accepting array of objects as \`:rows\`.\n\n<f-table :rows="[\n  { name: 'Klaus', born: 1926 },\n  { name: 'Werner', born: 1942 }\n]"/>  \n  `,props:{rows:{default:[],type:Array}},template:`\n  <div>\n  <table>\n    <thead>\n      <th\n        v-for="(h,i) in Object.keys(rows[0])"\n        :key="i"\n      >\n        <FMarkdown :content="h.trim()" />\n      </th>\n    </thead>\n    <tbody>\n      <tr v-for="(row,i) in rows" :key="i">\n        <td\n          v-for="(r,j) in Object.values(row)"\n          :key="j"\n        >\n          <FMarkdown :content="r.trim()" />\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  </div>\n`};var FButtons={description:`\nA button group, to be used with \`v-model\`.\n\n<f-buttons\n  v-model="someVariable"\n  :buttons="['First','Second']"\n/>\n  `,props:{buttons:{default:[],type:Array},value:{default:0,type:Number}},template:`\n    <div :style="{display: 'flex', marginLeft: '3px'}">\n      <div\n        v-for="(button,i) in buttons"\n        :key="i"\n        @click="$emit('input',i)"\n        :style="{\n          padding: '0.25rem 0.5rem',\n          border: '3px solid var(--primary)',\n          borderTopLeftRadius: i == 0 && 'var(--border-radius)',\n          borderBottomLeftRadius: i == 0 && 'var(--border-radius)',\n          borderTopRightRadius: i == buttons.length - 1 && 'var(--border-radius)',\n          borderBottomRightRadius: i == buttons.length - 1 && 'var(--border-radius)',\n          color: i === value ? 'var(--primary)' : 'var(--primary)',\n          fontWeight: 'bold',\n          fontSize: '0.9rem',\n          marginLeft: '-3px',\n          cursor: 'pointer',\n          background: i === value ? 'var(--tertiary)' : 'none',\n        }"\n        v-html="button"\n      />\n    </div>\n  `};var FTheme={description:`\nThemes the content.\n\n⌨️ Allows to toggle between light and dark theme using <kbd>Alt</kbd> <kbd>t</kbd>.\n\nTechnically it adjust CSS custom properties and redefines the color constants for the child elements.\n\n<f-buttons-data\n  :value="1"\n  :buttons="['Light', 'Dark', 'Blue','Yellow']\n">\n  <f-theme\n    slot-scope="data"\n    :theme="['light', 'dark', 'blue', 'yellow'][data.value]"\n    style="padding: 1rem;"\n  >\n    <h2>Themed content</h2>\n    <p>Some <code>code</code> here</p>\n    <f-scene size="220px">\n      <f-grid />\n      <f-circle />\n    </f-scene>\n  </f-theme>\n</f-buttons-data>\n  `,props:{theme:{default:"light",type:String}},data:function(){return{currentTheme:this.theme,themes:{light:{},dark:{background:"var(--darkestgray)","--primary":"var(--lightergray)","--secondary":"var(--lightgray)","--tertiary":"var(--gray)","--lightblue":"var(--darkblue)","--quaternary":"var(--darkergray)","--blue":"var(--lightgray)"},blue:{background:"var(--darkblue)","--primary":"var(--lightergray)","--secondary":"var(--lightgray)","--tertiary":"var(--gray)","--lightblue":"var(--darkblue)","--quaternary":"var(--darkergray)","--emphasis":"var(--blue)"},yellow:{background:"var(--yellow)","--emphasis":"var(--orange)","--primary":"var(--darkgray)","--lightblue":"var(--darkblue)","--gray":"var(--darkgray)","--secondary":"var(--lightgray)","--tertiary":"var(--lightgray)"}}}},template:`\n    <div :style="themes[theme]">\n      <slot />\n    </div>\n  `};var FContent={mixins:[Css],tag:"Layout",description:`\nShows Markdown content.\n\nThe component allows to navigate between slides using  <kbd>Alt</kbd> <kbd>←</kbd> and <kbd>Alt</kbd> <kbd>→</kbd>.\n\n<f-content\n  content="## Hello world"\n  style="box-shadow: inset 0 0 10px lightgray"\n/>\n  `,components:{FMarkdown:FMarkdown},props:{content:{default:"",type:String},index:{default:0,type:Number},autosaveId:{default:"0",type:String},type:{default:"document",type:String}},data:()=>({currentIndex:0}),computed:{preparedContent(){return this.content.replace(/\n--\n/g,"").split(/\n---\n/).map(parseColumns)}},methods:{first(){this.currentIndex=0},last(){this.currentIndex=this.preparedContent.length-1},prev(){this.currentIndex>0&&this.currentIndex--},next(){this.currentIndex<this.preparedContent.length-1&&this.currentIndex++}},mounted(){const savedContent=JSON.parse(localStorage.getItem(`f-content-slides-${this.autosaveId}`));if(savedContent){this.currentIndex=savedContent.currentIndex}this.$watch("index",index=>{this.currentIndex=index},{immediate:true});this.$watch("currentIndex",currentIndex=>{localStorage.setItem(`f-content-slides-${this.autosaveId}`,JSON.stringify({currentIndex:currentIndex}))});document.addEventListener("keydown",e=>{if(e.altKey&&e.keyCode==37){e.preventDefault();this.prev()}if(e.altKey&&e.keyCode==39){e.preventDefault();this.next()}});if(this.$global){this.$global.$on("next",()=>this.next());this.$global.$on("prev",()=>this.prev());this.$global.$on("first",()=>this.first());this.$global.$on("last",()=>this.last())}},template:`\n  <div>\n    <div\n      v-for="(slide,i) in preparedContent"\n      v-show="type == 'slides' ? i == currentIndex : true"\n      class="slide"\n      :style="{\n        display: 'grid',\n        gridTemplateColumns: 'repeat(' + slide.colCount + ', 1fr)',\n        gridtemplateRows: 'repeat(' + slide.rowCount + ', 1fr)',\n        gridTemplateAreas: slide.areas,\n        gridAutoRows: '',\n        gridAutoColumns: '',\n        overflow: 'hidden',\n        gridGap: 'var(--content-gap)',\n        padding: 'var(--content-padding)'\n      }"\n    >\n      <FMarkdown\n        v-for="(col,i) in slide.content"\n        :style="{ gridArea: 'a' + (i + 1) }"\n        :key="i"\n        :content="col"\n        class="cell"\n      />\n    </div>\n  </div>\n  `,cssprops:{"--content-padding":{default:"var(--base3)",description:"Content padding"},"--content-gap":{default:"var(--base2)",description:"Gap between content columns"}}};var FContentDocument={tag:"Layout",description:`\nShows a Markdown content as a linear document.\n\n<f-content-document\n  content="## Hello\n---\n\n## World"\n  style="box-shadow: inset 0 0 10px lightgray"\n/>\n  `,components:{FMarkdown:FMarkdown},props:{content:{default:"",type:String}},computed:{preparedContent(){return this.content.replace(/\n---\n/g,"").replace(/\n--\n/g,"").replace(/\n-\n/g,"")}},template:`\n    <div style="padding: var(--base4);">\n      <FMarkdown :content="preparedContent"/>\n    </div>\n  `};var FContentSlides={mixins:[Css],description:`\nShows Markdown content as slides.\n\n⌨️ Allows to navigate between slides using  <kbd>Alt</kbd> <kbd>←</kbd> and <kbd>Alt</kbd> <kbd>→</kbd>.\n\n<f-buttons-data :buttons="['Slide 1','Slide 2']">\n  <f-content-slides\n    slot-scope="data"\n    :index="data.value"\n    content="## Hello\n---\n## World"\n    style="box-shadow: inset 0 0 10px lightgray"\n  />\n</f-buttons-data>\n  `,components:{FMarkdown:FMarkdown},props:{content:{default:"",type:String},index:{default:0,type:Number},base:{default:"12px",type:String},autosaveId:{default:"0",type:String}},data:()=>({currentIndex:0}),computed:{preparedContent(){return this.content.replace(/\n--\n/g,"").split(/\n---\n/).map(parseColumns)}},methods:{first(){this.currentIndex=0},prev(){this.currentIndex>0&&this.currentIndex--},next(){this.currentIndex<this.preparedContent.length-1&&this.currentIndex++}},mounted(){const savedContent=JSON.parse(localStorage.getItem(`f-content-slides-${this.autosaveId}`));if(savedContent){this.currentIndex=savedContent.currentIndex}this.$watch("index",index=>{this.currentIndex=index},{immediate:true});this.$watch("currentIndex",currentIndex=>{localStorage.setItem(`f-content-slides-${this.autosaveId}`,JSON.stringify({currentIndex:currentIndex}))});document.addEventListener("keydown",e=>{if(e.altKey&&e.keyCode==37){e.preventDefault();this.prev()}if(e.altKey&&e.keyCode==39){e.preventDefault();this.next()}});if(this.$global){this.$global.$on("next",()=>this.next());this.$global.$on("prev",()=>this.prev());this.$global.$on("first",()=>this.first())}},template:`\n  <div>\n    <div\n      v-for="(slide,i) in preparedContent"\n      v-show="i == currentIndex"\n      class="slide"\n      :style="{\n        '--base': base,\n        display: 'grid',\n        gridGap: 'var(--gap)',\n        gridTemplateColumns: 'repeat(' + slide.colCount + ', 1fr)',\n        gridtemplateRows: 'repeat(' + slide.rowCount + ', 1fr)',\n        gridTemplateAreas: slide.areas,\n        gridAutoRows: '',\n        gridAutoColumns: '',\n        overflow: 'hidden',\n        padding: 'var(--f-content-slides-padding)'\n      }"\n    >\n      <FMarkdown\n        v-for="(col,i) in slide.content"\n        :style="{ gridArea: 'a' + (i + 1) }"\n        :key="i"\n        :content="col"\n        class="cell"\n      />\n    </div>\n  </div>\n  `,css:`\n    :root {\n      --f-content-slides-padding: var(--base5);\n    }\n    /*\n    .cell > div > p {\n      margin: 0;\n    }\n    */\n  `};var FTabs={tag:"Layout",description:`\nTabs, to be used with \`v-model\` and under \`<header>\`.\n\n<f-tabs\n  v-model="someVariable"\n  :buttons="['First','Second']"\n/>\n  `,props:["buttons","value"],template:`\n    <div style="\n      display: flex;\n      height: 3rem;\n      borderBottom: 3px solid var(--darkgray);\n      overflow: auto;\n    ">\n      <div\n        v-for="(button,i) in buttons"\n        :key="i"\n        @click="$emit('input',i)"\n        :style="{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          padding: i == 0 ? '0 1.25rem 0 2rem' : '0 1.25rem',\n          fontWeight: 'bold',\n          borderRight: '3px solid var(--darkgray)',\n          color: 'var(--darkgray)',\n          cursor: 'pointer',\n          background: i === value ? 'var(--gray)' : 'white'\n        }"\n      >\n        {{ button }}\n      </div>\n    </div>\n  `};var FMenu={description:`\nVertical menu, to be used with \`v-model\`.\n\n  <f-menu\n    v-model="someVariable"\n    :items="['First','Second']"\n  />\n  `,props:["items","value"],data:()=>({activeItem:0}),methods:{top(){window.scrollTo(0,0)}},template:`\n    <div>\n      <div\n        v-for="(item,i) in items"\n        :key="i"\n        :style="{\n          cursor: 'pointer',\n        }"\n      >\n        <div :style="{\n          display: 'flex',\n          alignItems: 'center',\n          padding: 'var(--base2) var(--base2) var(--base) var(--base2)',\n          fontWeight: 'bold',\n          color: 'var(--primary)',\n          transform: 'translate(0,calc(var(--base) * 0))',\n        }"\n        @click="activeItem = i;"\n        v-html="item.title"\n        >\n        </div>\n        <div\n          v-if="i == activeItem"\n          v-for="(item,j) in item.items"\n          :key="j"\n          :style="{\n            display: 'flex',\n            alignItems: 'center',\n            padding: 'var(--base) var(--base) var(--base) var(--base4)',\n            color: i === value[0] && j === value[1] ? 'var(--darkgray)' : 'var(--primary)',\n            background: i === value[0] && j === value[1] ? 'var(--tertiary)' : '',\n          }"\n          @click="$emit('input',[i,j]); top()"\n          v-html="item.title"\n        > \n        </div>\n      </div>\n    </div>\n  `};var FEditor={tag:"Layout",props:{value:{default:"",type:[String,Number]}},description:`\nCreates a code editor, to be used with v-model.\n\n⌨️ Allows to enter two spaces using  <kbd>tab</kbd> key.\n\nTechnically it creates a \`<textarea>\` tag. It is a low level component, it is usually easier to use \`<f-content-editor>\` instead.\n\n<f-editor v-model="someVariable" />\n  `,data:()=>({content:""}),mounted(){this.$watch("value",value=>{this.content=value},{immediate:true});this.$refs.editor.onkeydown=function(e){if(e.keyCode===9){const val=this.value;const start=this.selectionStart;const end=this.selectionEnd;this.value=val.substring(0,start)+"  "+val.substring(end);this.selectionStart=this.selectionEnd=start+2;return false}}},template:`\n    <textarea\n      ref="editor"\n      v-model="content"\n      @input="$emit('input', content)"\n      style="\n        border: none;\n        color: var(--blue);\n        font-family: var(--font-mono);\n        font-size: calc(var(--base) * 1.75);\n        line-height: calc(var(--base) * 2.75);\n        height: 100%;\n        outline: none;\n        resize: none;\n        width: 100%;\n        background: var(--lightblue);\n        padding: var(--base2);\n      "\n    />\n  `};var FMarkdownEditor={mixins:[Css],props:["value"],data:()=>({editor:null}),methods:{},mounted(){this.editor=CodeMirror(this.$refs.editor,{mode:"gfm",theme:"material",lineWrapping:true,viewportMargin:Infinity,tabSize:2,lineNumbers:false});const doc=this.editor.getDoc();this.$watch("value",value=>{const cursor=doc.getCursor();this.editor.setValue(value);doc.setCursor(cursor)},{immediate:true});this.editor.on("change",(editor,{origin:origin})=>{if(origin!=="setValue"){this.$emit("input",editor.getValue())}})},template:`\n  <div style="position: relative;">\n    <div style="position: absolute; inset: 0;" ref="editor" />\n  </div>\n  `,css:`\n  @import url("https://unpkg.com/codemirror/lib/codemirror.css");\n  @import url("https://unpkg.com/codemirror/theme/material.css");\n  \n  .CodeMirror {\n    font-family: var(--font-mono);\n    padding: var(--base2);\n    font-size: calc(var(--base) * 1.85);\n    line-height: 1.55em;\n    height: auto;\n  }\n  .CodeMirror-linenumbers {\n    margin-right: var(--base);\n  }\n  .CodeMirror-linenumber {\n    opacity: 0.25;\n  }\n  .CodeMirror-line {\n    color: #87a0ab !important;\n  }\n  .CodeMirror .cm-header  {\n    color: #f0f3f5;\n    font-weight: normal;\n  }\n  .CodeMirror .cm-tag {\n    color: #58b2e9;\n  }\n  .CodeMirror .cm-strong {\n    font-weight: normal;\n    color: #f0f3f5;\n  }\n  .CodeMirror .cm-em {\n    color: #f0f3f5;\n  }\n  .CodeMirror .cm-strong.cm-em {\n    font-weight: normal;\n    font-style: normal;\n    color: var(--yellow);\n  }\n  `};var FContentEditor={mixins:[Css],description:`\nCreates a code editor with a live preview.\n\n<f-theme theme="yellow">\n  <f-content-editor content="### Hello World" />\n</f-theme>\n  `,props:{content:{default:"",type:String},type:{default:"slides",type:String,description:"Content type, can be a linear `document` or a paginated `slides`"}},data:()=>({innerContent:""}),mounted(){this.$watch("content",content=>{this.innerContent=content},{immediate:true})},template:`\n  <div\n    class="grid"\n    :style="{\n      '--cols': '1fr 1fr',\n      '--rows': '1fr'\n    }">\n    <f-markdown-editor\n      v-model="innerContent"\n    />\n    <div>\n      <slot :content="innerContent">\n        <f-content\n          :content="innerContent"\n          :type="type"\n        />\n      </slot> \n    </div>\n  </div>\n  `};var FSlider={description:`\nAllows to create a simple slider, to be used with \`v-model\`.\n\nTechnically it is a combination of  \`label\` and \`<input type="range" />\` tags.\n\n<f-slider\n  title="Some variable"\n  v-model="someVariable"\n/>\n  `,props:{title:{default:"Value",type:String},value:{default:0,type:[Number,String]},from:{default:0,type:[Number,String]},to:{default:100,type:[Number,String]},step:{default:1,type:[Number,String]}},template:`\n  <div>\n    <label>{{ title }} <code>{{ value }}</code></label>\n    <input\n      type="range"\n      :value="value"\n      :min="from"\n      :max="to"\n      :step="step"\n      @input="$emit('input', $event.target.value)"\n    />\n  </div>\n  `};var FIconGithub={description:`\nA Github icon.\n\n<f-icon-github />\n  `,props:{url:{default:"https://github.com/designstem/framework"}},template:`\n  <a :href="url" style="border: none;">\n    <svg\n      width="24"\n      height="24"\n      viewBox="0 0 24 24"\n      xmlns="http://www.w3.org/2000/svg"\n    >\n      <path\n        fill="var(--primary)"\n        d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"\n      />\n    </svg>\n  </a>\n  `};var components=Object.freeze({FSvg:FSvg,FBasegrid:FBasegrid,FScene:FScene,FGrid:FGrid,FGroup:FGroup,FBox:FBox,FPoint:FPoint,FLine:FLine,FCircle:FCircle,FPolygon:FPolygon,FRegularpolygon:FRegularpolygon,FText:FText,FArtboard:FArtboard,FGridPattern:FGridPattern,FRepeatGrid:FGridPattern,FShiftPattern:FShiftPattern,FRepeatShift:FShiftPattern,FHexPattern:FHexPattern,FRepeatHex:FHexPattern,FCirclePattern:FCirclePattern,FRepeatCircle:FCirclePattern,FSpinPattern:FSpinPattern,FRepeatSpin:FSpinPattern,FSlicePattern:FSlicePattern,FRepeatSlice:FSlicePattern,FMirrorX:FMirrorX,FMirrorY:FMirrorY,FScene3:FScene3,FBox3:FBox3,FGrid3:FGrid3,FGroup3:FGroup3,FPoint3:FPoint3,FLine3:FLine3,FCircle3:FCircle3,FTriangle3:FTriangle3,FPolygon3:FPolygon3,FRegularpolygon3:FRegularpolygon3,FHedron3:FHedron3,FPolyhedron3:FPolyhedron3,FFade:FFade,FBounce:FBounce,FArrayData:FArrayData,FBufferData:FBufferData,FAnimationData:FAnimationData,FButtonsData:FButtonsData,FRgbData:FRgbData,FHslData:FHslData,FSliderData:FSliderData,FDragData:FDragData,FFetchData:FFetchData,FSheetData:FSheetData,FRotationData:FRotationData,FReceiveData:FReceiveData,FKeyboardData:FKeyboardData,FKeyboard:FKeyboard,FMath:FMath,FSidebar:FSidebar,FInline:FInline,FCard:FCard,FHr:FHr,FVr:FVr,FTable:FTable,FButtons:FButtons,FTheme:FTheme,FContent:FContent,FContentDocument:FContentDocument,FContentSlides:FContentSlides,FTabs:FTabs,FMenu:FMenu,FEditor:FEditor,FMarkdownEditor:FMarkdownEditor,FContentEditor:FContentEditor,FSlider:FSlider,FIconGithub:FIconGithub,FMarkdown:FMarkdown,FRender:FRender});for(const name in components){Vue.component(name,components[name])}new Vue({mixins:[Init],el:"#app",methods:Object.assign({},utils)})})();
