(function(){"use strict";let d=[];d.push(`\n## rgb\n\n<code>rgb(r, g, b, a = 1)</code>\n\nOutputs a CSS <code>rgba()</code> string\n\n#### Example:\n\n    rgb(50,100,50,0.5)\n    rgb(50,100,50)\n\n#### Output:\n\n    {{ rgb(50,100,50,0.5) }}\n    {{ rgb(50,100,50) }}\n\n`);const rgb=(r,g,b,a=1)=>`rgba(${r},${g},${b},${a})`;d.push(`\n## hsl\n\n<code>hsl(h, s = 100, l = 50, a = 1)</code>\n\nOutputs a CSS <code>hsla()</code> string\n\n#### Example\n\n    hsl(50,100,50,0.5)\n    hsl(50,100,50)\n    hsl(50)\n\n#### Output\n\n    {{ hsl(50,100,50,0.5) }}\n    {{ hsl(50,100,50) }}\n    {{ hsl(50) }}\n\n`);const hsl=(h,s=100,l=50,a=1)=>`hsl(${h},${s}%,${l}%,${a})`;d.push(`\n## scale\n\n<code>scale(value, start1, stop1, start2 = -2, stop2 = 2)</code>\n\nScales linearily the input <code>value</code>\nfrom the input range between <code>start1</code> and <code>stop1</code>\nto the output range  <code>start2</code> and <code>stop2</code>.\n\n#### Example:\n\n    scale(50, 0, 100, 0, 1)\n\n#### Output:\n\n    {{ scale(50, 0, 100, 0, 1) }}\n\n  `);const scale=(value,start1,stop1,start2=-2,stop2=2)=>{return(value-start1)/(stop1-start1)*(stop2-start2)+start2};d.push(`\n## round\n\n<code>round(value, decimals = 0)</code>\n\nRounds a number <code>value</code> to optional <code>decimals</code>.\n\nExample:\n    \n    round(0.1234)\n    round(0.1234, 2)\n\nOutput:\n  \n    {{ round(0.1234) }}\n    {{ round(0.1234, 2) }}\n\n`);const round=(value,decimals=0)=>{return Number(Math.round(value+"e"+decimals)+"e-"+decimals)};d.push(`\n## random\n\n<code>random(from, to, float = false)</code>\n\nGenerates a random integer number between <code>from</code> and <code>to</code>. \nIf <code>float = true</code>, the output value will be floating point number.\n\nExample:\n    \n    random(0, 2)\n    random(0, 2, true)\n\nOutput:\n  \n    {{ random(0, 2) }}\n    {{ random(0, 2, true) }}\n`);const random=(from,to,float=false)=>{const r=from+Math.random()*(to-from);return float?r:Math.floor(r,2)};d.push(`\n## range\n\n<code>range(from, to, step = 1)</code>\n\nGenerates an array of integer numbers in between <code>from</code> and <code>to</code> with optional <code>step</code> parameter.\n\nExample\n\n    range(-1, 1, 0.5)\n\nOutput\n\n    {{ range(-1, 1, 0.5) }}\n\n`);const range=(from,to,step=1)=>{const length=Math.floor((to-from)/step)+1;return Array.from({length:length}).map((_,i)=>from+i*step)};d.push(`\n## cx cy\n\n<code>cx(angle, radius)</code>\n<code>cy(angle, radius)</code>\n\nReturn 2D x and y coordinates on point on the circle (_polar coordinates_) based on <code>angle</code> in degrees and circle's <code>radius</code>.\n\n#### Example\n\n    cx(90, 10) cy(90, 10)\n\n#### Output\n\n    {{ cx(90, 10) }} {{ cy(90, 10) }}\n\n\n`);const cx=(deg,radius)=>{return Math.cos((deg-90)*(Math.PI/180))*radius};const cy=(deg,radius)=>{return Math.sin((deg-90)*(Math.PI/180))*radius};d.push(`\n## cpoints\n\n<code>cpoints(count, radius)</code>\n\nBased on <code>cx</code> and <code>cy</code> functions above calculates and <code>count</code> of <code>{ x, y }</code> points on the circle.\n\n#### Example\n\n    cpoints(4,10)\n\n#### Output\n\n    {{ cpoints(4,10) }}\n`);const cpoints=(count,radius)=>{return Array.from({length:count}).map((p,i)=>({x:cx(360/count*i,radius),y:cy(360/count*i,radius)}))};d.push(`\n## deg2rad\n\n<code>deg2rad(angle)</code>\n\nConverts angle in degrees to radians.\n\n#### Example\n\n<Math>\nradians = \\frac{degrees \\cdot \\pi}{180} = \\frac{180 \\cdot \\pi}{180} = \\pi\n</Math>\n\n    deg2rad(180)\n\n#### Output\n\n    {{ deg2rad(180) }}\n`);const deg2rad=deg=>deg*Math.PI/180;d.push(`\n## rad2deg\n\n<code>rad2deg(angle)</code>\n\nConverts angle in radians to degrees.\n\n#### Example\n\n    rad2deg(Math.PI)\n\n#### Output\n\n    {{ rad2deg(Math.PI) }}\n`);const rad2deg=rad=>rad*180/Math.PI;d.push(`\n## shuffle\n\n<code>shuffle(array)</code>\n\nSorts the array in random order.\n\n#### Example\n\n    shuffle(range(0,3))\n\n#### Output\n\n    {{ shuffle(range(0,3)) }}\n\n`);const shuffle=arr=>arr.sort(()=>Math.random()-.5);d.push(`\n## any\n\n<code>any(array)</code>\n\nPicks a random element from the array.\nSupports both array and function parameters syntax.\n\n#### Example\n\n    any([0,1,2])\n    any(0,1,2)\n\n#### Output\n\n    {{ any([0,1,2]) }}\n    {{ any(0,1,2) }}\n\n`);const any=function(arr){return arr instanceof Array?shuffle(arr)[0]:shuffle(Array.from(arguments))[0]};d.push(`\n## flatten\n\n<code>flatten(array)</code>\n\nFlatten multidimensional array\n\n#### Example\n\n    flatten([0,1,[2,[3,4]]])\n\n#### Output\n\n    {{ flatten([0,1,[2,[3,4]]]) }}\n\n`);const flatten=list=>list.reduce((a,b)=>a.concat(Array.isArray(b)?flatten(b):b),[]);d.push(`\n## chunk\n\n<code>chunk(array, length)</code>\n\nChunks array into smaller <code>length</code>-sized arrays\n\n#### Example\n\n    chunk([0,1,2,3],2)\n\n#### Output\n\n    {{ chunk([0,1,2,3],2) }}\n\n`);const chunk=(arr,length)=>Array.from({length:Math.ceil(arr.length/length)}).map((_,n)=>arr.slice(n*length,n*length+length));d.push(`\n## snapToGrid\n\n<code>snapToGrid(value, gridsize)</code>\n\nReturns the value in the closest point of 2D grid.\n\n#### Input\n\n    snapToGrid(0.51,0.5)\n\n#### Output\n\n    {{ snapToGrid(0.51,0.5) }}\n`);const snapToGrid=(value,gridsize)=>{return value%gridsize<gridsize/2?value-value%gridsize:value+gridsize-value%gridsize};d.push(`\n## log\n\n<code>log(message) = console.log(message) </code>\n\n\n`);const log=value=>console.log(value);const parseSheet=data=>{return data.feed.entry.map(entry=>{return Object.keys(entry).map(field=>{if(field.startsWith("gsx$")){return[field.split("$")[1],entry[field].$t]}}).filter(field=>field).reduce((field,item)=>{field[item[0]]=item[1];return field},{})})};const cleanColumns=content=>{const pattern=/(\|[0-9\s]+\n)/g;return content.replace(pattern,"")};const parseColumns=slide=>{const pattern=/(\|[0-9\s]+\n)/g;const match=slide.match(pattern);if(match){const rowCount=match.length;const cols=match.map(m=>{return m.trim().replace(/\|/g,"").split("").filter(m=>!m.match(/\s+/))});const colCount=cols[0].length;const areas=cols.map(m=>`'${m.map(m=>`a${m}`).join(" ")}'`).join("\n");const content=slide.split(/\n-\n/).map(c=>c.replace(pattern,""));return{rowCount:rowCount,colCount:colCount,areas:areas,content:content}}else{const content=slide.split(/\n-\n/);return{rowCount:1,colCount:content.length,areas:`'${content.map((_,i)=>`a${i+1}`).join(" ")}'`,content:content}}};const kebabCase=string=>string.replace(/([a-zA-Z])(?=[A-Z])/g,"$1-").toLowerCase();const docs=()=>d;var utils=Object.freeze({rgb:rgb,hsl:hsl,scale:scale,round:round,random:random,range:range,cx:cx,cy:cy,cpoints:cpoints,deg2rad:deg2rad,rad2deg:rad2deg,shuffle:shuffle,any:any,chunk:chunk,flatten:flatten,snapToGrid:snapToGrid,log:log,parseSheet:parseSheet,docs:docs,parseColumns:parseColumns,cleanColumns:cleanColumns,kebabCase:kebabCase});var Render={name:"Render",props:{t:String},data:()=>({render:null,someVariable:0}),methods:utils,mounted(){this.$watch("t",value=>{const template=Vue.compile(value);this.render=template.render;this.$options.staticRenderFns=[];this._staticTrees=[];for(var i in template.staticRenderFns){this.$options.staticRenderFns.push(template.staticRenderFns[i])}},{immediate:true})},render:function(h){return this.render?this.render():h()}};var Markdown={components:{Render:Render},props:["content"],methods:{marked:marked},template:`\n    <Render :t="'<div>' + marked(content, { breaks: true }) + '</div>'" />\n  `};var Editor={tag:"Layout",props:["value"],data:()=>({content:""}),mounted(){this.$watch("value",value=>{this.content=value},{immediate:true});this.$refs.editor.onkeydown=function(e){if(e.keyCode===9){const val=this.value;const start=this.selectionStart;const end=this.selectionEnd;this.value=val.substring(0,start)+"  "+val.substring(end);this.selectionStart=this.selectionEnd=start+2;return false}}},template:`\n    <textarea\n      ref="editor"\n      v-model="content"\n      @input="$emit('input', content)"\n      style="\n        border: none;\n        color: var(--blue);\n        font-family: var(--font-mono);\n        font-size: 0.85rem;\n        height: 100%;\n        line-height: 1.3rem;\n        outline: none;\n        resize: none;\n        width: 100%;\n        background: var(--lightblue);\n        padding: 0.8rem;\n        border-radius: var(--border-radius);\n      "\n    />\n  `};var Css={created(){if(this.$options.css){const el=document.createElement("style");el.innerHTML=this.$options.css;document.querySelector("head").appendChild(el)}}};var FSceneScope={mixins:[Css],tag:"2D",description:`\nA simple 2D scene with some tweaks to regular SVG document.\n\nNote that **Y axis is flipped** and <code>x</code> and <code>y</code> span from <code>-2</code> to <code>2</code> to work same way as **ThreeScene**.\n`,example:`\n<f-scene>\n  <circle fill="var(--primary)" r="1" />\n  <circle\n    cx="1"\n    cy="1"\n    fill="var(--red)"\n    r="0.1"\n  />\n</f-scene>\n  `,props:{size:{default:250,type:Number},innerSize:{default:4,type:Number}},computed:{viewBox(){return`-${this.innerSize/2} -${this.innerSize/2} ${this.innerSize} ${this.innerSize}`}},template:`\n    <svg\n        :width="size"\n        :height="size"\n        :view-box.camel="viewBox"\n        class="two"\n    >\n      <g transform="scale(1,-1)">\n        <slot />\n      </g>\n    </svg>\n  `,css:`\n    .two * {\n      vector-effect: non-scaling-stroke;\n    }\n    .two text {\n      font-size: 1.5%;\n      transform: scale(1, -1);\n      text-anchor: middle;\n      pointer-events: none;\n    }\n  `};var FArtboard={mixins:[Css],tag:"2D",description:`\n`,example:`\n<f-artboard>\n  <circle fill="var(--primary)" r="100" />\n</f-artboard>\n  `,props:{width:{default:500,type:Number},height:{default:500,type:Number}},methods:{range:range,rgb:rgb},template:`\n    <svg\n        :width="width"\n        :height="height"\n        class="artboard"\n    >\n      <line\n        v-for="(x,i) in range(0, width, 25)"\n        :x1="x" :y1="0" :x2="x" :y2="height" \n        :stroke="rgb(0,0,0,i % 4 ? 0.1 : 0.2)"\n      />\n      <line\n        v-for="(y,i) in range(0, width, 25)"\n        :x1="0" :y1="y" :x2="width" :y2="y" \n        :stroke="rgb(0,0,0,i % 4 ? 0.1 : 0.2)"\n      />\n      <slot />\n    </svg>\n  `,css:`\n    .artboard * {\n      vector-effect: non-scaling-stroke;\n    }\n  `};const Object2D={computed:{positionTransform(){return`translate(${this.position.x||0} ${this.position.y||0})`},rotationTransform(){return`rotate(${this.rotation.x||this.rotation.y||this.rotation.z||0})`},scaleTransform(){return`scale(${this.scale.x||1,this.scale.y||1})`},transform(){return`${this.positionTransform} ${this.rotationTransform} ${this.scaleTransform}`}}};var FGrid={mixins:[Object2D],tag:"2D",description:`\nAs the classic once [wrote](http://printingcode.runemadsen.com/lecture-grid/), there is nothing worse for an artist than a blank canvas.\n  `,example:`\n<f-scene>\n  <f-grid />\n  <f-grid\n    :position="{ x: 1, y: 1 }"\n    :rotation="{ z: 45 }"\n    :scale="{ x: 0.2, y: 0.2 }"\n  />\n</f-scene>\n  `,props:{position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object}},template:`\n  <g :transform="transform">\n    <line\n      v-for="x in [-2,-1,0,1,2]"\n      :x1="x"\n      :y1="-3"\n      :x2="x"\n      :y2="3"\n      stroke="var(--primary)"\n      opacity="0.2"\n    />\n    <line\n      v-for="y in [-2,-1,0,1,2]"\n      :x1="-3"\n      :y1="y"\n      :x2="3"\n      :y2="y"\n      stroke="var(--primary"\n      opacity="0.2"\n    />\n  </g>\n  `};var FGroup={mixins:[Object2D],tag:"2D",description:`\nThe component is a wrapper around SVG's <code>g</code> for feature parity with \`f-group3\` and applying transformations like <code>:position</code>, <code>:rotation</code> and <code>:scale</code>\n\n  `,example:`\n<f-scene>\n  <f-grid />\n  <f-group\n    :position="{ x: 1, y: 1 }"\n    :rotation="{ z: 45 }"\n    :scale="{ x: 0.2, y: 0.2 }"\n  >\n    <f-box />\n  </f-group>\n</f-scene>\n  `,props:{position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object}},template:`\n    <g :transform="transform">\n      <slot />\n    </g>\n  `};var FBox={mixins:[Object2D],tag:"2D",description:`\n Kazimir Malevich must be proud.  \n  `,example:`\n<f-scene>\n  <f-grid />\n  <f-box />\n  <f-box\n    :points="[{x: -1},{x: 0},{x: 1}]"\n    :r="0.1"\n    width="0.2"\n    height="0.2"\n    fill="var(--red)"\n  />\n</f-scene>\n  `,props:{x:{default:0,type:Number},y:{default:0,type:Number},points:{default:[],type:Array},width:{default:1,type:Number},height:{default:1,type:Number},stroke:{default:"none",type:String},strokeWidth:{default:3,type:Number},fill:{default:"var(--primary)",type:String},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:1,type:Number}},template:`\n  <g>\n    <rect\n      v-if="points.length"\n      v-for="p in points"\n      :x="p.x ? p.x - ((p.width ? p.width : width)  / 2) : x - (width / 2)"\n      :y="p.y ? p.y - ((p.width ? p.width : width) / 2) : y - (width / 2)"\n      :width="p.width || width"\n      :height="p.height || height"\n      :stroke="p.stroke || stroke"\n      :stroke-width="p.strokeWidth || strokeWidth"\n      stroke-linecap="round"\n      stroke-linejoin="round"\n      :fill="p.fill || fill"\n      :transform="transform"\n      :opacity="p.opacity || opacity"\n    />\n    <rect\n      v-if="!points.length"\n      :x="x - (width / 2)"\n      :y="y - (width / 2)"\n      :width="width"\n      :height="height"\n      :stroke="stroke"\n      :stroke-width="strokeWidth"\n      stroke-linecap="round"\n      stroke-linejoin="round"\n      :fill="fill"\n      :transform="transform"\n      :opacity="opacity"\n    />\n  </g>\n  `};var FLine={mixins:[Object2D],tag:"2D",description:`\n  `,example:`\n<f-scene>\n  <f-grid />\n  <f-line\n    :points="[\n      { x: -1.5, y: 0 },\n      { x: -1,   y: 0 },\n      { x: -1.5, y: 0.5 },\n    ]"\n  />\n  <f-line\n    :points="[\n      { x: -0.5, y: 0   },\n      { x: 0,    y: 0   },\n      { x: -0.5, y: 0.5 },\n    ]"\n    :closed="true"\n  />\n  <f-line\n    :points="[\n      { x: 0.5, y: 0   },\n      { x: 1,   y: 0   },\n      { x: 0.5, y: 0.5 },\n    ]"\n    :curved="true"\n  />\n  <f-line\n    :points="[\n      { x: 1.5, y: 0   },\n      { x: 2,   y: 0   },\n      { x: 1.5, y: 0.5 },\n    ]"\n    :closed="true"\n    :curved="true"\n  />\n</f-scene>\n  `,props:{points:{default:[],type:Array},stroke:{default:"var(--primary)",type:String},strokeWidth:{default:3,type:Number},fill:{default:"none",type:String},closed:{default:false,type:Boolean},curved:{default:false,type:Boolean},tension:{default:false,type:[Number]},opacity:{default:1,type:Number},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object}},computed:{path(){if(this.curved&&this.closed){return d3.line().x(d=>d.x).y(d=>d.y).curve(d3.curveCardinalClosed.tension(this.tension||0))}if(this.curved&&!this.closed){return d3.line().x(d=>d.x).y(d=>d.y).curve(d3.curveCardinal.tension(this.tension||0))}if(!this.curved&&this.closed){return d3.line().x(d=>d.x).y(d=>d.y).curve(d3.curveCardinalClosed.tension(this.tension||1))}return d3.line().x(d=>d.x).y(d=>d.y)}},template:`\n    <g :transform="transform">\n      <path\n        :d="path(points)"\n        :stroke="stroke"\n        :stroke-width="strokeWidth"\n        stroke-linecap="round"\n        stroke-linejoin="round"\n        :fill="fill"\n        :opacity="opacity"\n      />\n    </g>\n    `};var FCircle={mixins:[Object2D],tag:"2D",description:`\n  `,example:`\n<f-scene>\n  <f-grid />\n  <f-circle />\n  <f-circle\n    :points="[{x: -0.5},{x: 0},{x: 0.5}]"\n    :r="0.1"\n    fill="var(--red)"\n  />\n</f-scene>  \n  `,props:{x:{default:0,type:Number},y:{default:0,type:Number},points:{default:[],type:Array},r:{default:1,type:Number},stroke:{default:"none",type:String},strokeWidth:{default:3,type:Number},fill:{default:"var(--primary)",type:String},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:1,type:Number}},template:`\n    <g>\n    <circle\n      v-if="points.length"\n      v-for="p in points"\n      :cx="p.x || x"\n      :cy="p.y || y"\n      :r="p.r || r"\n      :stroke="p.stroke || stroke"\n      :stroke-width="p.strokeWidth || strokeWidth"\n      :fill="p.fill || fill"\n      :transform="transform"\n      :opacity="p.opacity || opacity"\n    />\n    <circle\n      v-if="!points.length"\n      :cx="x"\n      :cy="y"\n      :r="r"\n      :stroke="stroke"\n      :stroke-width="strokeWidth"\n      :fill="fill"\n      :transform="transform"\n      :opacity="opacity"\n    />\n    </g>\n  `};var FPolygon={mixins:[Object2D],tag:"2D",example:`\n<f-scene>\n  <f-grid />\n  <f-polygon\n    :points="[\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: 0, y: 1 },\n    ]"\n  />\n  <f-polygon\n    :points="[\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: 0, y: 1 },\n    ]"\n    :position="{ x: 1, y: 1 }"\n    :rotation="{ z: 45 }"\n    :scale="{ x: 0.2, y: 0.2 }"\n  />\n</f-scene>\n  `,props:{points:{default:[],type:Array},stroke:{default:"none",type:String},strokeWidth:{default:3,type:Number},fill:{default:"var(--primary)",type:String},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:1,type:Number}},template:`\n    <f-line\n      :points="points"\n      :stroke="stroke"\n      :stroke-width="strokeWidth"\n      stroke-linecap="round"\n      stroke-linejoin="round"\n      :fill="fill"\n      :transform="transform"\n      :opacity="opacity"\n      :closed="true"\n    />\n  `};var FRegularpolygon={mixins:[Object2D],tag:"2D",description:`\n  `,example:`\n<f-scene>\n  <f-regularpolygon />\n  <f-regularpolygon\n    :r="0.5"\n    :count="5"\n    fill="var(--red)"\n  />\n</f-scene>\n  `,props:{count:{default:6,type:Number},r:{default:1,type:Number},stroke:{default:"none",type:String},strokeWidth:{default:3,type:Number},fill:{default:"var(--primary)",type:String},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object},opacity:{default:1,type:Number}},methods:{cpoints:cpoints},template:`\n    <f-polygon\n      :points="cpoints(count,r)"\n      :stroke="stroke"\n      :stroke-width="strokeWidth"\n      stroke-linecap="round"\n      stroke-linejoin="round"\n      :fill="fill"\n      :transform="transform"\n      :opacity="opacity"\n    />\n  `};const Base={inject:["_baseUrl"],props:{baseUrl:{type:String,default(){return this._baseUrl}}},provide(){return{_baseUrl:this.baseUrl}},methods:{dispatchEvent(name,detail,options={}){let e=new CustomEvent(name,Object.assign(options,{detail:detail,bubbles:true,cancelable:true}));return this.$el.dispatchEvent(e)}},template:`\n    <div><slot/></div>\n  `};const Object3D={mixins:[Base],provide(){return{parentObj:this.curObj}},inject:["parentObj"],props:{name:{type:String},type:{type:String,default:"Object3D"},obj:{type:Object},scale:{type:[Object,Number]},position:{type:Object},rotation:{type:Object}},watch:{scale:{deep:true,handler(v){this.setScale(v)}},position:{deep:true,handler(v){Object.assign(this.curObj.position,v)}},rotation:{deep:true,handler(v){Object.assign(this.curObj.rotation,v)}},obj(obj){this.curObj=obj},curObj(obj,oldObj){this.unsetObj(oldObj);this.setObj(obj)}},data(){let curObj=this.obj;if(!curObj){curObj=new THREE[this.type]}return{curObj:curObj}},mounted(){this.setObj(this.curObj)},beforeDestroy(){this.unsetObj(this.curObj)},methods:{setObj(obj){obj.name=this.name||obj.name||obj.type;this.setScale(this.scale);Object.assign(obj.position,this.position);Object.assign(obj.rotation,this.rotation);if(this.parentObj){this.parentObj.add(obj)}this.$emit("update:obj",obj)},unsetObj(obj){this.$emit("update:obj",null);if(this.parentObj){this.parentObj.remove(obj)}},setScale(v){if(v&&typeof v==="number"){v={x:v,y:v,z:v}}Object.assign(this.curObj.scale,v)}}};const Scene={mixins:[Object3D],inject:["global"],props:{obj:{type:Object}},data(){let curObj=this.obj;if(!curObj){curObj=new THREE.Scene}curObj.name=curObj.name||curObj.type;return{curObj:curObj}},mounted(){let scene=this.curObj;this.global.scene=scene;window.scene=scene}};const Renderer={provide(){return{parentObj:null,_baseUrl:null,global:this.global}},props:{size:{type:Object,required:true},obj:{type:Object},background:{type:String,default:"#ffffff"}},data(){let curObj=this.obj;if(!curObj){curObj=new THREE.SVGRenderer({antialias:true});curObj.setClearColor(this.background)}curObj.name=curObj.name||curObj.type;curObj.setSize(this.size.w,this.size.h);let global={};global.rendererSize=this.size;global.rendererDom=curObj.domElement;return{curObj:curObj,global:global}},mounted(){this.$refs.container.appendChild(this.curObj.domElement);this.animate()},methods:{animate(){requestAnimationFrame(this.animate);this.curObj.render(this.global.scene,this.global.camera)}},template:`\n  <div>\n    <slot></slot>\n    <div ref="container"></div>\n  </div>\n  `};const Camera={mixins:[Object3D],inject:["global"],props:{obj:{type:Object}},data(){let curObj=this.obj;const{w:w,h:h}=this.global.rendererSize;if(!curObj){curObj=new THREE.PerspectiveCamera(75,w/h,.1,1e3)}curObj.name=curObj.name||curObj.type;return{curObj:curObj}},mounted(){this.global.camera=this.curObj}};var FScene3={tag:"3D",description:`\n_Der Raum_.\n`,example:`\n<f-scene3>\n  <f-box3 :rotation="{ y: 0.1, x: 1, z: 0.1 }" />\n</f-scene3>\n  `,components:{Renderer:Renderer,Scene:Scene,Camera:Camera},template:`\n    <div class="three">\n      <Renderer :size="{ w: 250, h: 250 }">\n        <Scene>\n          <Camera :position="{ z: 2.63 }" />\n          <slot />\n        </Scene>\n      </Renderer>\n    </div>\n  `};var FBox3={tag:"3D",example:`\n<f-scene3>\n  <f-box3 />\n</f-scene3>  \n  `,mixins:[Object3D],props:{width:{default:1,type:Number},height:{default:1,type:Number},depth:{default:1,type:Number},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},data(){let curObj=this.obj;if(!curObj){var geometry=new THREE.BoxGeometry(this.width,this.height,this.depth);curObj=new THREE.Mesh(geometry,new THREE.MeshNormalMaterial({flatShading:true,opacity:.8,side:THREE.DoubleSide}))}curObj.name=curObj.name||curObj.type;return{curObj:curObj}}};var FGrid3={mixins:[Object3D],tag:"3D",description:`\nAdds a grid to the 3D scene and applies transformations like <code>:position</code>, <code>:rotation</code> and <code>:scale</code>.\n  `,example:`\n<f-scene3>\n  <f-grid3\n    :rotation="{ y: 0.5, x: 0.5 }"\n    :scale="{ x: 0.5, y: 0.5, z: 0.5 }"\n  />\n</f-scene3>\n  `,props:{scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},methods:{deg2rad:deg2rad},template:`\n  <f-group3>\n    <f-group3\n      v-for="(rotation,i) in [\n        { x: 0, y: 0, z: 0},\n        { x: 0, y: deg2rad(90), z: 0},\n        { x: deg2rad(90), y: 0, z: 0}\n      ]"\n      :rotation="rotation"\n      :key="i"\n    >\n    <f-line3\n      v-for="(x,i) in [-2,-1,0,1,2]"\n      :key="'a'+i"\n      stroke-width="1"\n      :stroke="0xdddddd"\n      :points="[\n        { x, y: 2 },\n        { x, y: -2 }\n      ]"\n    />\n    <f-line3\n      v-for="(y,i) in [-2,-1,0,1,2]"\n      :key="'b'+i"\n      stroke-width="1"\n      :stroke="0xdddddd"\n      :points="[\n        { x: 2, y },\n        { x: -2, y }\n      ]"\n    />\n  </f-group3>\n  <f-line3\n      :stroke="0xaaaaaa"\n      :stroke-width="1.5"\n      :points="[\n        { x: 0, y: 2, z: 0 },\n        { x: 0, y: -2, z: 0 }\n      ]"\n  />\n  <f-line3\n    :stroke="0xaaaaaa"\n    :stroke-width="1.5"\n    :points="[\n      { x: 2, y: 0, z: 0 },\n      { x: -2, y: 0, z: 0 }\n    ]"\n  />\n  <f-line3\n    :stroke="0xaaaaaa"\n    :stroke-width="1.5"\n    :points="[\n      { x: 2, y: 0, z: 0 },\n      { x: -2, y: 0, z: 0 }\n    ]"\n  />\n  </f-group3>\n  `};var FGroup3={mixins:[Object3D],tag:"3D",description:`\nGroups components in 3D scene and applies transformations like <code>:position</code>, <code>:rotation</code> and <code>:scale</code>.\n  `,example:`\n<f-scene3>\n  <f-grid3 />\n  <f-group3\n    :position="{ x: 1, y: 1 }"\n    :rotation="{ z: 45 }"\n    :scale="{ x: 0.2, y: 0.2, z: 0.2 }"\n    >\n      <f-box3 />\n  </f-group3>\n</f-scene3>\n  `,props:{type:{type:String,default:"Mesh"},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},provide(){return{meshVm:this}}};var FLine3={mixins:[Object3D],tag:"3D",description:`\nDraws a line in full 3D space, accepts any number of 3D coordinates in <code>:points</code> array.  `,example:`\n<f-scene3>\n  <f-group3\n    :rotation="{ y: 0.5, x: 0.5 }"\n    :scale="{ x: 0.5, y: 0.5, z: 0.5 }"\n  >\n  <f-grid3 />\n  <f-line3\n    :points="[\n      { x: 1, y:  1, z: 0 },\n      { x: 1, y:  0, z: 1 },\n      { x: 1, y: -1, z: 0 },\n      { x: 1, y: -2, z: 0 },\n    ]"\n  />\n  </f-group3>\n</f-scene3>\n  `,mixins:[Object3D],props:{points:{default:[],type:Array},stroke:{default:"black"},strokeWidth:{default:3},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},data(){let curObj=this.obj;if(!curObj){const geometry=new THREE.Geometry;this.points.forEach(p=>{geometry.vertices.push(new THREE.Vector3(p.x||0,p.y||0,p.z||0))});const material=new THREE.LineBasicMaterial({color:new THREE.Color(this.stroke),linewidth:this.strokeWidth});curObj=new THREE.Line(geometry,material)}curObj.name=curObj.name||curObj.type;return{curObj:curObj}}};var FCircle3={mixins:[Object3D],tag:"3D",description:`\n  `,example:`\n<f-scene3>\n  <f-grid3 />\n  <f-circle3\n    :position="{ x: 1, y: 1 }"\n    :rotation="{ z: 45 }"\n    :scale="{ x: 0.2, y: 0.2 }"\n  />\n</f-scene3>\n  `,props:{r:{default:1,type:Number},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:[Object,Number]}},template:`\n    <f-regularpolygon3 :radius="r" :count="64" />\n  `};var FTriangle3={tag:"3D",description:`\nThe key building block of 3D graphics, this component draws a triangle in 3D space. It accepts three 3D coordinates in <code>:points</code> array.\n  `,example:`\n<f-scene3>\n  <f-group3\n    :rotation="{ y: 0.5, x: 0.5 }"\n    :scale="{ x: 0.5, y: 0.5, z: 0.5 }"\n  >\n    <f-grid3 />\n    <f-triangle3\n      :points="[\n        { x: 1, y: 1,  z: 0 },\n        { x: 1, y: 0,  z: 1 },\n        { x: 1, y: -1, z: 0 },\n      ]" \n    /> \n  </f-group3>\n</f-scene3>\n  `,mixins:[Object3D],props:{points:{default:[],type:Array},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},data(){let curObj=this.obj;if(!curObj){var geometry=new THREE.Geometry;this.points.forEach(p=>{geometry.vertices.push(new THREE.Vector3(p.x||0,p.y||0,p.z||0))});geometry.faces.push(new THREE.Face3(0,1,2));geometry.computeFaceNormals();curObj=new THREE.Mesh(geometry,new THREE.MeshNormalMaterial({flatShading:true,opacity:.5,side:THREE.DoubleSide}))}curObj.name=curObj.name||curObj.type;return{curObj:curObj}}};const InternalPolygon={mixins:[Object3D],props:{points:{default:[]}},data(){let curObj=this.obj;if(!curObj){var vectorPoints=this.points.map(p=>new THREE.Vector3(p.x||0,p.y||0,p.z||0));var shape=new THREE.Shape(vectorPoints);var geometry=new THREE.ShapeGeometry(shape);curObj=new THREE.Mesh(geometry,new THREE.MeshNormalMaterial({flatShading:true,opacity:.7,side:THREE.DoubleSide}))}curObj.name=curObj.name||curObj.type;return{curObj:curObj}}};var FPolygon3={mixins:[Object3D],tag:"3D",description:`\nDraws a polygon on a plane in 3D space, accepts 2D coordinates in <code>:points</code> array.\n  `,example:`\n<f-scene3>\n  <f-grid3 />\n  <f-polygon3\n    :points="[\n      { x:  1, y:  1 },\n      { x:  1, y: -1 },\n      { x: -1, y: -1 },\n      { x: -1, y:  1 },\n    ]"\n  />\n</f-scene3>\n  `,components:{InternalPolygon:InternalPolygon},props:{points:{default:[],type:Array},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},computed:{linePoints(){return this.points.concat(this.points[0]).map(p=>{p.z=0;return p})}},template:`\n    <f-group>\n      <InternalPolygon :points="points" />\n      <f-line :points="linePoints" />\n    </f-group>\n  `};var FRegularpolygon3={mixins:[Object3D],tag:"3D",description:`\nRegular polygon\n  `,example:`\n<f-animation-data :duration="10000" :to="360">\n<f-scene3 slot-scope="data">\n  <f-group3\n    :rotation="{\n      x: deg2rad(data.value),\n      y: deg2rad(data.value)\n    }"\n  >\n    <f-regularpolygon3\n      v-for="c in 2"\n      :rotation="{ x: deg2rad(360 / 2 * c) }"\n      :count="4"\n      :height="1"\n    />\n  </f-group3>\n</f-scene3>\n</f-animation-data>\n  `,methods:{cpoints:cpoints},props:{count:{default:6,type:Number},radius:{default:1,type:Number},height:{default:0,type:Number},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},computed:{points(){return cpoints(this.count,this.radius)}},template:`\n    <f-group3>\n      <f-triangle3\n        v-for="(p,i) in points"\n        :key="i"\n        :points="[\n          {x: p.x, y: p.y, z: 0},\n          {\n            x: points[i == points.length - 1 ? 0 : i + 1].x,\n            y: points[i == points.length - 1 ? 0 : i + 1].y,\n            z: 0\n          },\n          {x: 0, y: 0, z: 0}\n        ]"\n      />   \n      <f-triangle3\n        v-for="(p,i) in points"\n        :key="i"\n        :points="[\n          {x: p.x, y: p.y, z: 0},\n          {\n            x: points[i == points.length - 1 ? 0 : i + 1].x,\n            y: points[i == points.length - 1 ? 0 : i + 1].y,\n            z: 0\n          },\n          {x: 0, y: 0, z: height}\n        ]"\n      />\n      <f-line3 :points="points.concat(points[0])" />\n      <f-line3\n        v-for="p in points"\n        :points="[\n          {x: p.x, y: p.y, z: 0},\n          {x: 0, y: 0, z: height}\n        ]"\n      />\n      </f-group3>\n  `};var FPolyhedron3={tag:"3D",example:`\n<f-scene3>\n  <f-polyhedron3\n    v-for="(hedron,i) in [\n      'Tetrahedron',\n      'Octahedron',\n      'Icosahedron',\n      'Dodecahedron'\n    ]"\n    :key="i"\n    :hedron="hedron"\n    :position="{x: i - 1.5}"\n    :radius="0.5"\n  />\n</f-scene3>  \n  `,mixins:[Object3D],props:{hedron:{default:"Icosahedron",type:String},radius:{default:1,type:Number},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},data(){let curObj=this.obj;if(!curObj){var geometry=new THREE[this.hedron+"Geometry"](this.radius,0);curObj=new THREE.Mesh(geometry,new THREE.MeshNormalMaterial({flatShading:true,opacity:.8,side:THREE.DoubleSide}))}curObj.name=curObj.name||curObj.type;return{curObj:curObj}}};var FFade={mixins:[Css],tag:"Transitions",description:`\nFading transition\n  `,example:`\n<f-buttons-data :buttons="['On', 'Off']">\n  <h3 slot-scope="data">\n    <f-fade v-if="!data.value">Fading like a flower</f-fade>\n  </h3>\n</f-buttons-data>  \n  `,template:`\n  <transition appear name="fade">\n    <div><slot /></div>\n  </transition>\n  `,css:`\n  .fade-enter-active {\n    transition: all 1s linear;\n  }\n  .fade-leave-active {\n    transition: all 1s linear;\n  }\n  .fade-enter, .fade-leave-to {\n    opacity: 0;\n  }\n  `};var FBounce={mixins:[Css],tag:"Transitions",description:`\nBounce transition\n  `,example:`\n<f-buttons-data :buttons="['On', 'Off']">\n  <h3 slot-scope="data">\n    <f-bounce v-if="!data.value">Bounce like a butterfly</f-bounce>\n  </h3>\n</f-buttons-data>  \n  `,template:`\n  <transition appear name="bounce">\n    <div><slot /></div>\n  </transition>\n  `,css:`\n  .bounce-enter-active {\n    animation: bounce-in .4s;\n  }\n  .bounce-leave-active {\n    animation: bounce-in .4s reverse;\n  }\n  .bounce-enter, .bounce-leave-to {\n    transform: scale(0);\n  }\n  \n  @keyframes bounce-in {\n    0% {\n      transform: scale(0);\n    }\n    50% {\n      transform: scale(1.2);\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n  \n  `};var FArrayData={tag:"Data",example:`\n<f-array-data :length="3">\n  <f-scene slot-scope="data">\n  <circle\n    v-for="(value,x) in data.value"\n    :key="x"\n    :cx="x - 1"\n    r="0.5"\n    :fill="value ? 'var(--red)' : 'var(--primary)'"\n    @click="data.update(1 - value, x)"\n  />\n  </f-scene>\n</f-array-data>\n\n<f-array-data :length="7" :dimensions="2">\n  <f-scene slot-scope="data">\n  <template v-for="(col, x) in data.value">\n  <f-box\n    v-for="(value, y) in col"\n    :key="x * y"\n    :x="x / 2 - 1.2"\n    :y="y / 2 - 1.2"\n    width="0.49"\n    height="0.49"\n    :fill="value ? 'var(--red)' : 'var(--primary)'"\n    @click.native="data.update(1 - value, x, y)"\n  />\n  </template>\n  </f-scene>\n</f-array-data>\n\n<f-array-data :length="3" :map="(_,i) => i">\n  <pre slot-scope="data">{{ data }}</pre>\n</f-array-data>\n  `,props:{length:{default:1,type:Number},dimensions:{default:1,type:Number},map:{default:d=>d,type:Function}},methods:{onUpdate(newValue,x,y=-1,z=-1){if(y>-1&&z>-1){this.$set(this.maxValue[x][y],z,newValue)}if(y>-1&&z==-1){this.$set(this.maxValue[x],y,newValue)}if(y==-1&&z==-1){this.$set(this.maxValue,x,newValue)}}},created(){if(this.dimensions==3){this.maxValue=Array.from({length:1e3}).map(_=>Array.from({length:1e3}).map(_=>Array.from({length:1e3}).map(_=>0)))}if(this.dimensions==2){this.maxValue=Array.from({length:1e3}).map(_=>Array.from({length:1e3}).map(_=>0))}if(this.dimensions==1){this.maxValue=Array.from({length:1e3}).map(_=>0)}},computed:{value(){if(this.dimensions==3){return this.maxValue.slice(0,this.length).map(x=>x.slice(0,this.length).map(y=>y.slice(0,this.length).map(this.map)))}if(this.dimensions==2){return this.maxValue.slice(0,this.length).map(x=>x.slice(0,this.length).map(this.map))}if(this.dimensions==1){return this.maxValue.slice(0,this.length).map(this.map)}}},data:()=>({maxValue:[]}),template:`\n    <slot :value="value" :update="onUpdate" /> \n  `};var FAnimationData={tag:"Data",description:`\nAn animation component, based on [AnimeJS](https://github.com/juliangarnier/anime) library.\n\nSupports most of the animation options AnimeJS provides.\n\nSee also avabilable [easing functions](https://github.com/juliangarnier/anime#built-in-functions). \n  `,example:`\n<f-animation-data :to="99">\n  <h1\n    slot-scope="data"\n    class="bullet"\n  >\n      {{ Math.floor(data.value) }}\n  </h1>\n</f-animation-data>\n  `,props:{from:{default:0,type:Number},to:{default:100,type:Number},duration:{default:5e3,type:Number},playing:{default:true,type:Boolean},loop:{default:true,type:Boolean},alternate:{default:false,type:Boolean},easing:{default:"linear",type:String}},data:()=>({value:0}),mounted(){this.value=this.from;const a=anime({targets:this,duration:this.duration,value:this.to,loop:this.loop,direction:this.alternate?"alternate":null,easing:this.easing,autoplay:false});this.$watch("playing",playing=>{if(playing){a.play()}else{a.pause()}},{immediate:true})},render(){return this.$scopedSlots.default?this.$scopedSlots.default({value:this.value}):""}};var FButtonsData={tag:"Data",description:`\nWrapper component, adding a set of buttons on below the content and passing the current button index as <code>data.value</code>.\n  `,example:`\n<f-buttons-data :buttons="['Eins', 'Zwei', 'Polizei']">\n  <h1 slot-scope="data" class="bullet">{{ data.value + 1 }}</h1>\n</f-buttons-data>\n  `,props:{buttons:{default:[],type:Array},value:{default:0,type:Number}},data:function(){return{innerValue:this.value}},template:`\n    <div>\n      <f-buttons\n        v-model="innerValue"\n        :buttons="buttons"\n        style="margin-bottom: 1rem;"\n      />\n      <slot :value="innerValue" />\n    </div>\n  `};var FRgbData={tag:"Data",description:`\n  Sliders for <code>r g b</code> color values.\n  `,example:`\n<f-rgb-data r="102" g="51" b="153">\n  <f-scene slot-scope="data">\n    <f-circle :fill="rgb(...data.values)" />\n  </f-scene>\n</f-rgb-data>\n  `,props:{r:{default:128,type:Number},g:{default:128,type:Number},b:{default:128,type:Number}},methods:{deg2rad:deg2rad},template:`\n<f-slider-data :values="[\n  { title: 'R', to: 255, value: r },\n  { title: 'G', to: 255, value: g },\n  { title: 'B', to: 255, value: b },\n]">\n  <template slot-scope="data">\n    <slot :values="data.values" />\n  </template>\n</f-slider-data>\n  `};var FHslData={tag:"Data",description:`\nSliders for <code>h s l</code> color values.\n  `,example:`\n<f-hsl-data h="270" s="50" l="40">\n  <f-scene slot-scope="data">\n    <f-circle :fill="hsl(...data.values)" />\n  </f-scene>\n</f-hsl-data>\n  `,props:{h:{default:0,type:Number},s:{default:100,type:Number},l:{default:50,type:Number}},methods:{deg2rad:deg2rad},template:`\n<f-slider-data :values="[\n  { title: 'Hue', to: 360, value: h, },\n  { title: 'Saturation', to: 100, value: s },\n  { title: 'Lightness', to: 100, value: l },\n]">\n    <template slot-scope="data">\n      <slot :values="data.values" />\n    </template>\n  </f-slider-data>\n  `};var FSliderData={tag:"Data",description:`\nAdds a slider next to the content and passing the slider value as <code>data.value</code> \n  `,example:`\n<f-slider-data>\n  <h1 class="bullet" slot-scope="data">\n    {{ data.value }}\n  </h1>\n</f-slider-data>\n\n<f-slider-data :values="[\n  { title: 'X', from: -2, to: 2, value: 0, float: true },\n  { title: 'Y', from: -2, to: 2, value: 0, float: true },\n]">\n  <f-scene slot-scope="data">\n    <f-grid />\n    <f-circle :position="{\n      x: data.values[0],\n      y: data.values[1]\n    }" />\n  </f-scene>\n</f-slider-data>\n  `,props:{value:{default:0,type:Number},title:{default:"Value",type:String},from:{default:0,type:Number},to:{default:100,type:Number},step:{default:1,type:Number},float:{default:false,type:Boolean},values:{default:()=>[],type:[Array]}},data:function(){return{innerValue:this.value,innerValues:this.values.length?this.values.map(v=>v.value?v.value:0):null}},template:`\n    <div>\n      <div v-if="values.length" v-for="(v,i) in values" :key="i">\n        <label>{{ v.title ? v.title : 'Values ' + i }} <code>{{ innerValues[i] }}</code></label>\n        <input\n          style="margin-bottom: 1rem;"\n          type="range"\n          v-model="innerValues[i]"\n          :min="v.from || this.from"\n          :max="v.to || this.to"\n          :step="v.step ? v.step : this.step ? this.step : v.float ? 0.000001 : 1"\n        />\n      </div>\n      <slot v-if="values.length" :values="innerValues" />\n      <div v-if="!values.length">\n        <label>{{ title }} <code>{{ innerValue }}</code></label>\n        <input style="margin-bottom: 1rem;" type="range" v-model="innerValue" :min="from" :max="to" :step="step ? step : float ? 0.01 : 1" />\n      </div>\n      <slot v-if="!values.length" :value="innerValue" />\n    </div>\n  `};var FFetchData={tag:"Data",description:`\nFetches data via AJAX.\n  `,example:`\n<f-fetch-data\n  url="https://sofetch.glitch.me/https://samples.openweathermap.org/data/2.5/weather?q=Berlin,de&appid=b6907d289e10d714a6e88b30761fae22"\n  type="json"\n>\n  <pre\n    style="width: 250px"\n    slot-scope="data"\n  >\n  Weather in Berlin:\n  {{ data.value.weather[0].main }}\n  </pre>\n</f-fetch-data>\n  `,data:()=>({value:null,loaded:false}),props:{url:{default:"",type:String},type:{default:"text",type:String}},mounted(){fetch(this.url).then(res=>{if(this.type=="json"){return res.json()}return res.text()}).then(res=>{this.value=res;this.loaded=true}).catch(error=>console.log(error))},render(){return this.loaded?this.$scopedSlots.default?this.$scopedSlots.default({value:this.value}):"":""}};var FSheetData={tag:"Data",description:`\nFetches data from Google Sheets.\n  `,example:`\n<f-sheet-data id="110RcQmdpOkFcS2KIlahEh8QezwH2cwnihDiV__ZiYqk">\n<f-scene slot-scope="data">\n  <rect \n    v-for="(v,i) in data.value"\n    :x="scale(i,0,data.value.length,-1.9,1.9)"\n    :y="-2"\n    :height="scale(v.age,0,100,0,2.9)"\n    :width="(4 / data.value.length) - 0.1"\n    fill="var(--red)"\n    rx="0.05"\n  />  \n</f-scene>\n</f-sheet-data>\n  `,data:()=>({value:null,loaded:false}),props:{id:{default:"",type:String}},mounted(){if(this.id){fetch(`https://spreadsheets.google.com/feeds/list/${this.id}/od6/public/values?alt=json`).then(res=>res.json()).then(res=>{this.value=parseSheet(res);this.loaded=true})}},render(){return this.loaded?this.$scopedSlots.default?this.$scopedSlots.default({value:this.value}):"":""}};var FRotationData={tag:"Data",description:`\nSliders for <code>x y z</code> coordinate data in *radians*. \n  `,example:`\n    <f-rotation-data>\n      <f-scene3 slot-scope="data">\n        <f-box3 :rotation="{\n          x: data.values[0],\n          y: data.values[1],\n          z: data.values[2]\n        }" />\n      </f-scene3>\n    </f-rotation-data>\n  `,methods:{deg2rad:deg2rad},template:`\n  <f-slider-data :values="[\n    { title: 'X axis', to: deg2rad(360), float: true },\n    { title: 'Y axis', to: deg2rad(360), float: true },\n    { title: 'Z axis', to: deg2rad(360), float: true },\n  ]">\n    <template slot-scope="data">\n      <slot :values="data.values" />\n    </template>\n  </f-slider-data>\n  `};var FMath={mixins:[Css],tag:"Content",description:`\nTypesetting math equations using <a href="https://github.com/Khan/KaTeX">KaTeX</a> library which supports most of the classic <a href="https://reu.dimacs.rutgers.edu/Symbols.pdf">LaTeX math syntax</a>.\n<small>\nIt also supports dynamic content with inline variables but due to the technical limitations you will need to pass the <code>:update</code> prop of any type to the component to indicate the contents need to update.\n</small>\n  `,example:`\n<p>Does not update</p>\n<f-math>\n  a = 10\n  b = a^2 + 100\n  c = \\frac{a}{b} = \\frac{10}{a^2 + 100}\n</f-math>\n\n<p>Updates when edited and slider changed</p>\n<f-slider-data>\n  <f-math slot-scope="data" :update="data.value">\n    a = 10\n    b = a^2 + {{ data.value }}\n    c = \\frac{a}{b} = \\frac{10}{a^2 + 100}\n  </f-math>\n</f-slider-data>\n  `,props:["update"],data:()=>({math:0}),methods:{renderMath(){this.math=katex.renderToString(this.$slots.default[0].text.trim().replace(/\n+/g,"\\newline"),{throwOnError:false})}},mounted(){this.renderMath();this.$watch("update",value=>this.renderMath())},template:`\n    <div v-html="math" />\n  `,css:`\n  .katex {\n    font-size: 1.3em;\n    color: var(--primary);\n    padding: 1rem 2rem;\n    display: block;\n  }\n  .katex .colorbox {\n    border-radius: var(--border-radius);\n    color: red;\n    background: var(--lightblue) !important;\n  }\n  .katex .boxpad {\n    padding: 0;\n  }\n  .katex .boxpad .mord {\n    color: var(--blue);\n    font-family: var(--font-mono) !important;\n    font-size: 1rem;\n  }\n  `};var FSidebar={tag:"Content",description:`\n  `,example:`\nWant so see what this project <f-sidebar src="./README.md">is all about</f-sidebar>?   \n  `,props:["src"],data:()=>({open:false}),template:`\n    <span>\n      <a style="color: var(--blue); border-bottom: 2px dotted var(--blue); cursor: help;" @click.prevent="open = !open"><slot /></a>\n      <div v-if="open" style="\n        position: fixed;\n        top: 0px;\n        right: 0px;\n        bottom: 0px;\n        width: 50vw;\n        background: var(--white);\n        border-left: var(--border-width) solid var(--primary);\n        overflowY: auto;\n        box-shadow: calc(50vw * -1) 0 rgba(0,0,0,0.15);\n      ">\n        <div\n          @click="open = false"\n          style="\n            cursor: pointer;\n            position: fixed;\n            top: 1rem;\n            right: 1rem;\n        ">✕</div>\n        <f-fetch-data :url="src">\n          <f-content-document\n            slot-scope="data"\n            :content="data.value"\n            style="font-size: 0.8em;"\n          />\n        </f-fetch-data>\n      </div>\n</span>\n  `};var FButtons={tag:"Layout",description:`\nA button group, meant to be used with \`v-model\`.\n  `,example:`\n<f-buttons\n  v-model="someVariable"\n  :buttons="['First','Second']"\n/>\n  `,props:{buttons:{default:[],type:Array},value:{default:0,type:Number}},template:`\n    <div :style="{display: 'flex', marginLeft: '3px'}">\n      <div\n        v-for="(button,i) in buttons"\n        :key="i"\n        @click="$emit('input',i)"\n        :style="{\n          padding: '0.25rem 0.5rem',\n          border: '3px solid var(--primary)',\n          borderTopLeftRadius: i == 0 && 'var(--border-radius)',\n          borderBottomLeftRadius: i == 0 && 'var(--border-radius)',\n          borderTopRightRadius: i == buttons.length - 1 && 'var(--border-radius)',\n          borderBottomRightRadius: i == buttons.length - 1 && 'var(--border-radius)',\n          color: i === value ? 'var(--primary)' : 'var(--primary)',\n          fontWeight: 'bold',\n          fontSize: '0.9rem',\n          marginLeft: '-3px',\n          cursor: 'pointer',\n          background: i === value ? 'var(--tertiary)' : 'none'\n        }"\n      >\n        {{ button }}\n      </div>\n    </div>\n  `};var FTheme={tag:"Content",description:`\nThemes the content\n  `,example:`\n<f-buttons-data\n  :value="1"\n  :buttons="['Light', 'Dark', 'Blue','Yellow']\n">\n  <f-theme\n    slot-scope="data"\n    :theme="['light', 'dark', 'blue', 'yellow'][data.value]"\n    style="padding: 1rem;"\n  >\n    <h2>Themed content</h2>\n    <p>Some <code>code</code> here</p>\n    <f-scene size="220px">\n      <f-grid />\n      <f-circle />\n    </f-scene>\n  </f-theme>\n</f-buttons-data>\n  `,props:{theme:{default:"light",type:String}},data:()=>({themes:{light:{},dark:{background:"var(--darkestgray)","--primary":"var(--lightergray)","--secondary":"var(--lightgray)","--tertiary":"var(--gray)","--lightblue":"var(--darkblue)","--blue":"var(--lightgray)"},blue:{background:"var(--darkblue)","--primary":"var(--lightergray)","--secondary":"var(--lightgray)"},yellow:{background:"var(--yellow)","--primary":"var(--darkgray)","--lightblue":"var(--darkblue)","--blue":"var(--lightgray)"}}}),template:`\n    <div :style="themes[theme]">\n      <slot />\n    </div>\n  `};var FContentDocument={tag:"Layout",components:{Markdown:Markdown},props:["content"],computed:{preparedContent(){return this.content.replace(/\n---\n/g,"").replace(/\n--\n/g,"").replace(/\n-\n/g,"")}},template:`\n    <div style="padding: 1.5rem;">\n      <Markdown :content="preparedContent"/>\n    </div>\n  `};var FContentSlides={mixins:[Css],tag:"Layout",components:{Markdown:Markdown},props:["content"],data:()=>({currentIndex:0}),computed:{preparedContent(){return this.content.replace(/\n--\n/g,"").split(/\n---\n/).map(parseColumns)}},methods:{prev(){this.currentIndex>0&&this.currentIndex--},next(){this.currentIndex<this.preparedContent.length-1&&this.currentIndex++}},mounted(){document.addEventListener("keydown",e=>{if(e.altKey&&e.keyCode==37){this.prev()}if(e.altKey&&e.keyCode==39){this.next()}})},template:`\n  <div>\n    <div\n      v-for="(slide,i) in preparedContent"\n      v-if="i == currentIndex"\n      class="slide"\n      :style="{\n        display: 'grid',\n        gridGap: '2em',\n        gridTemplateColumns: 'repeat(' + slide.colCount + ', 1fr)',\n        gridtemplateRows: 'repeat(' + slide.rowCount + ', 1fr)',\n        gridTemplateAreas: slide.areas,\n        gridAutoRows: '',\n        gridAutoColumns: '',\n        overflow: 'hidden',\n      }"\n    >\n      <Markdown\n        v-for="(col,i) in slide.content"\n        :style="{ gridArea: 'a' + (i + 1) }"\n        :key="i"\n        :content="col"\n      />\n    </div>\n  </div>\n`,css:`\n.slide {\n  padding: 3em;\n}\n.slide p, .slide li, .slide .button_primary {\n  font-size: 1.3em;\n  line-height: 1.7em;\n}\n.slide li p {\n  font-size: 1rem;\n}\n.slide .button_primary,\n.slide .button_secondary {\n  font-size: 1.3em;\n}\n.slide h1 {\n  font-size: 3em;\n}\n.slide h2 {\n  font-size: 2.2em;\n}\n.slide h3 {\n  font-size: 1.8em;\n}\n.slide li {\n  margin-bottom: 0.5em;\n}\n.slide blockquote {\n  margin: 2em 0 2em 0;\n}\n.slide blockquote p {\n  font-size: 1.3rem;\n}\n.slide small {\n  font-size: 1.3em;\n  line-height: 1.7em;\n}\n.slide p a, .slide a {\n  font-size: inherit;\n}\n`};var FContentCards={mixins:[Css],tag:"Layout",components:{Markdown:Markdown},props:["content"],data:()=>({currentIndex:0}),computed:{preparedContent(){return flatten(this.content.replace(/\n-\n/g,"").split(/\n---\n/).map(s=>s.split(/\n--\n/)))}},template:`\n    <div style="\n      display: grid;\n      grid-template-columns: repeat(3, 1fr);\n      grid-gap: 1rem;\n      padding: 1.5rem;\n    ">\n      <div\n        v-for="(card,i) in preparedContent"\n        style="\n          padding: 1rem;\n          border: 3px solid var(--gray);\n          border-radius: var(--border-radius);\n        "\n        class="card break"\n      >\n        <Markdown :content="card"/>\n      </div>\n    </div>\n  `,css:`\n    .card h1 {\n      font-size: 2rem;\n      line-height: 2rem;\n    }\n  `};var FTabs={tag:"Layout",description:`\nTabs, meant to be used with <code>v-model</code>.\n  `,props:["buttons","value"],template:`\n    <div :style="{\n      display: 'flex',\n      height: '3rem',\n      borderBottom: '3px solid var(--darkgray)'\n    }">\n      <div\n        v-for="(button,i) in buttons"\n        :key="i"\n        @click="$emit('input',i)"\n        :style="{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          padding: i == 0 ? '0 1.25rem 0 2rem' : '0 1.25rem',\n          fontWeight: 'bold',\n          borderRight: '3px solid var(--darkgray)',\n          color: 'var(--darkgray)',\n          cursor: 'pointer',\n          background: i === value ? 'var(--gray)' : 'white'\n        }"\n      >\n        {{ button }}\n      </div>\n    </div>\n  `};var FSceneData={mixins:[Css],tag:"Experimental",description:`\n  `,example:`\n<f-scene-data>  \n  <g slot-scope="data">\n    <circle\n      :r="data.mouse.pressed ? 1.1 : 1"\n      opacity="0.1"\n      fill="var(--primary)"\n      style="transition: all 100ms"\n    />\n    <circle\n      :r="data.mouse.pressed ? 0.8 : 1"\n      style="transition: all 100ms"\n      fill="var(--primary)"\n    />\n    <circle\n      :cx="data.mouse.x"\n      :cy="data.mouse.y"\n      :r="data.mouse.pressed ? 0.2 : 0.1"\n      fill="var(--red)"\n      style="transition: all 100ms"\n    />\n  </g>\n</f-scene-data>\n  `,props:{size:{default:250,type:Number}},computed:{viewBox(){return`-2 -2 4 4`}},data:()=>({mouseX:0,mouseY:0,mousePressed:false}),methods:{onSceneMousemove(e){let svg=this.$refs.svg;let point=svg.createSVGPoint();point.x=e.clientX;point.y=e.clientY;let ctm=this.$refs.container.getScreenCTM();if(ctm=ctm.inverse()){point=point.matrixTransform(ctm)}this.mouseX=point.x;this.mouseY=point.y}},template:`\n    <svg\n        :width="size"\n        :height="size"\n        :view-box.camel="viewBox"\n        class="two"\n        @mousemove="onSceneMousemove"\n        @mousedown="mousePressed = true"\n        @mouseup="mousePressed = false"\n        ref="svg"\n    >\n      <g transform="scale(1,-1)" ref="container">\n        <slot name="content" />\n        <slot :mouse="{ x: mouseX, y: mouseY, pressed: mousePressed }" />\n      </g>\n    </svg>\n  `};const Drag={props:["mouse","points","snap"],data:function(){return{draggedPoints:this.points}},methods:{handleMove(p){if(p.pressed){p.x=this.snap?snapToGrid(this.mouse.x,.25):this.mouse.x;p.y=this.snap?snapToGrid(this.mouse.y,.25):this.mouse.y}}},template:`\n    <g>\n      <slot :draggedPoints="draggedPoints" />\n      <g v-for="(p,i) in draggedPoints">\n        <circle\n          :cx="p.x"\n          :cy="p.y"\n          :r="p.active ? 0.22 : 0.2"\n          stroke-width="3"\n          stroke="var(--primary)"\n          :fill="p.pressed ? 'var(--primary)' : 'var(--secondary)'"\n          style="transition: fill r 100ms"\n        />\n        <circle\n          :cx="p.x"\n          :cy="p.y"\n          r="1.25"\n          fill="rgba(0,0,0,0)"\n          @mouseout="p.pressed = false; p.active = false"\n        />\n        <circle\n          :cx="p.x"\n          :cy="p.y"\n          r="0.5"\n          fill="rgba(0,0,0,0)"\n          style="cursor: pointer"\n          @mouseover="p.active = true"\n          @mouseout="p.active = false"\n          @mousedown="p.pressed = true"\n          @mouseup="p.pressed = false; p.active = false"\n          @mousemove="handleMove(p)"\n        />\n      </g>\n    </g>\n  `};var FDragData={tag:"Experimental",description:`\n  `,example:`\n  <f-drag-data\n  :points="[\n    { x:  0, y:  0.5 },\n    { x:  1, y: -1 },\n    { x: -1, y: -1 }\n  ]"\n  :snap="true"\n>\n  <f-group slot-scope="data">\n    <f-grid />\n    <f-polygon :points="data.points" />\n  </f-group>\n</f-drag-data>\n  `,components:{Drag:Drag,FSceneScope:FSceneScope},props:["points","snap"],data:function(){return{draggedPoints:this.points}},methods:{handleMove(p){if(p.pressed){p.x=this.snap?snapToGrid(this.mouse.x,.25):this.mouse.x;p.y=this.snap?snapToGrid(this.mouse.y,.25):this.mouse.y}}},template:`\n  <f-scene-scope>  \n    <Drag\n      slot-scope="mouseData"\n      :mouse="mouseData.mouse"\n      :points="points"\n      :snap="snap"\n    >\n      <template slot-scope="data">\n        <slot :points="data.draggedPoints" :mouse="mouseData.mouse" />\n      </template>\n    </Drag>\n    </f-scene-scope>\n  `};Vue.config.ignoredElements=["a-scene","a-sky","a-box","a-line"];var FScene3vr={tag:"Experimental",description:`\nA basic [A-Frame](https://aframe.io/) wrapper.\n  `,template:`\n    <a-scene embedded style="\n      width: 250px;\n      height: 250px;\n    ">\n      <a-entity position="0 0 2.5" camera look-controls />\n      <a-sky color="white"></a-sky>\n      <slot />\n    </a-scene>\n  `};var FGrid3vr={tag:"Experimental",template:`\n  <a-entity>\n    <a-entity\n      v-for="x in [-2,-1,0,1,2]"\n      :line="'start: '+x+', -2, 0; end: '+x+' 2 0; color: black'"\n      :key="'x'+x"\n    />\n    <a-entity\n      v-for="y in [-2,-1,0,1,2]"\n      :line="'start: -2, '+y+', 0; end: 2 '+y+' 0; color: black'"\n      :key="'y'+y"\n    />\n    <a-entity\n      v-for="z in [-2,-1,0,1,2]"\n      :line="'start: 0, -2 '+z+'; end: 0 2 '+z+'; color: black'"\n      :key="'z'+z"\n    />\n  </a-entity>\n  `};var FBox3vr={tag:"Experimental",props:{fill:{default:"black"}},template:`\n    <a-box height="1" color="black" opacity="0.5" ></a-box>\n  `};var FLine3vr={tag:"Experimental",template:`\n  <a-entity>\n    <a-entity line="start: 0, 0, 0; end: 1 1 4; color: red" />\n  </a-entity>\n  `};var FKeyboardData={tag:"Experimental",props:{keys:{default:[],type:Array}},example:`\n<f-keyboard-data :keys="['a']">\n  <f-buttons slot-scope="data" :buttons="['a']" :value="1 - data.values[0]">\n</f-keyboard-data>\n  `,data:()=>({values:[]}),mounted(){this.values=this.keys.map(_=>0);document.addEventListener("keydown",e=>{this.keys.forEach((k,i)=>{if(e.key==k){this.$set(this.values,i,1-this.values[i])}})},false)},template:`\n    <slot :values="values" />\n  `};const sortedComponents=[{FScene:FSceneScope},{FArtboard:FArtboard},{FGrid:FGrid},{FGroup:FGroup},{FBox:FBox},{FLine:FLine},{FCircle:FCircle},{FPolygon:FPolygon},{FRegularpolygon:FRegularpolygon},{FScene3:FScene3},{FBox3:FBox3},{FGrid3:FGrid3},{FGroup3:FGroup3},{FLine3:FLine3},{FTriangle3:FTriangle3},{FCircle3:FCircle3},{FPolygon3:FPolygon3},{FRegularpolygon3:FRegularpolygon3},{FPolyhedron3:FPolyhedron3},{FMath:FMath},{FSidebar:FSidebar},{FAnimationData:FAnimationData},{FArrayData:FArrayData},{FButtonsData:FButtonsData},{FSliderData:FSliderData},{FHslData:FHslData},{FRgbData:FRgbData},{FRotationData:FRotationData},{FFetchData:FFetchData},{FSheetData:FSheetData},{FFade:FFade},{FBounce:FBounce},{FKeyboardData:FKeyboardData}];var components=Object.freeze({FScene:FSceneScope,FArtboard:FArtboard,FGrid:FGrid,FGroup:FGroup,FBox:FBox,FLine:FLine,FCircle:FCircle,FPolygon:FPolygon,FRegularpolygon:FRegularpolygon,FScene3:FScene3,FBox3:FBox3,FGrid3:FGrid3,FGroup3:FGroup3,FLine3:FLine3,FCircle3:FCircle3,FTriangle3:FTriangle3,FPolygon3:FPolygon3,FRegularpolygon3:FRegularpolygon3,FPolyhedron3:FPolyhedron3,FFade:FFade,FBounce:FBounce,FArrayData:FArrayData,FAnimationData:FAnimationData,FButtonsData:FButtonsData,FRgbData:FRgbData,FHslData:FHslData,FSliderData:FSliderData,FFetchData:FFetchData,FSheetData:FSheetData,FRotationData:FRotationData,FMath:FMath,FSidebar:FSidebar,FButtons:FButtons,FTheme:FTheme,FContentDocument:FContentDocument,FContentSlides:FContentSlides,FContentCards:FContentCards,FTabs:FTabs,FEditor:Editor,Markdown:Markdown,Render:Render,FSceneData:FSceneData,FDragData:FDragData,FScene3vr:FScene3vr,FGrid3vr:FGrid3vr,FBox3vr:FBox3vr,FLine3vr:FLine3vr,FKeyboardData:FKeyboardData,sortedComponents:sortedComponents});const Props={props:{props:{type:[Object,Array]}},methods:{formatDefault(prop){if(prop.hasOwnProperty("default")){if(prop.default instanceof Object&&!(prop.default instanceof Array)){return"{}"}return prop.default.length==0?"[]":String(prop.default)}return null},formatType(prop){if(prop.hasOwnProperty("type")){const t=prop.type instanceof Array?prop.type[0]():typeof prop.type=="function"?prop.type():prop.type;return t instanceof Array?"array":typeof t}return null}},computed:{propsData(){if(this.props){return this.props instanceof Array?this.props.map(p=>({name:p})):Object.entries(this.props).map(p=>({name:p[0],default:this.formatDefault(p[1]),type:this.formatType(p[1])}))}else{return[]}}},template:`\n    <div style="font-size: 0.9rem">\n    <table>\n      <thead>\n        <th>Name</th>\n        <th>Default</th>\n        <th>Type</th>\n      </thead>\n      <tbody>\n        <tr v-for="prop in propsData">\n          <td><code style="background: none">:{{ prop.name }}</code></td>\n          <td><code v-if="prop.default" style="background: none">{{ prop.default }}</code></td>\n          <td>\n            <code\n              v-if="prop.type"\n              style="background: none; color: var(--secondary)">\n                {{ prop.type }}\n            </code>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    </div>\n  `};var Components={components:{Render:Render,Editor:Editor,Markdown:Markdown,Props:Props},props:{tag:{default:null}},data:function(){return{componentData:sortedComponents.map(c=>Object.entries(c)[0]).map(c=>Object.assign(c[1],{name:c[0]})).filter(c=>c.example).filter(c=>{return this.tag?this.tag==c.tag:true}).map(({name:name,example:example,description:description,props:props})=>({name:name,example:example?example.trim():"",description:description||"",props:props}))}},methods:{kebabCase:kebabCase},template:`\n    <div>\n        <div v-for="(c,i) in componentData" :style="{\n          padding: '2rem 0',\n          minHeight: '15rem'\n        }"\n        >\n          <div style="display: flex">\n            <div style="width: 300px;">\n              <h2><{{ kebabCase(c.name) }}></h2>\n              <Markdown :content="c.description" />\n              <br>\n              <template v-if="c.props">\n                <h3>Props</h3>\n                <Props :props="c.props" />\n              </template>\n            </div>\n            <div style="flex:1; margin-left: 2rem;">\n              <Editor v-model="c.example" />\n            </div>\n            <Render :t="'<div>'+c.example+'</div>'" style="width: 250px; align-items: flex-start; margin-left: 2rem;" />\n          </div>\n        </div>\n    </div>\n  `};var Utils={components:{Markdown:Markdown},data:()=>({docs:docs()}),template:`\n      <Markdown :content="docs.join('<br><p />')" />\n  `};const content=`\n## Inspiration?\n\n**Nadieh Bremer**'s work all the way back to the [spirograph](https://www.visualcinnamon.com/2016/01/animating-dashed-line-d3).\n\n**Lea Verou** and her [Mavo](https://www.smashingmagazine.com/2017/05/introducing-mavo/) framework with just-write-HTML promise.\n\n**Alan Kay** ahd his [Doing with Images Makes Symbols](https://www.youtube.com/watch?v=p2LZLYcu_JY) lecture and its [spiritual following](https://www.youtube.com/watch?v=8pTEmbeENF4).\n\n**Rune Madsen** and his [Programming Design Systems](https://programmingdesignsystems.com/) book and [rune.js](http://runemadsen.github.io/rune.js/) framework.\n\n**John Gold** and his [Taking Robots to Design School](https://jon.gold/2016/05/robot-design-school) and [Declarative Design Tools](https://jon.gold/2016/06/declarative-design-tools/).\n\n**Steven Wittens** and his [interactive math explorations](http://acko.net).\n\n<br>\n\n## Why Vue? Why not React?\n\nWhile development the framework we wondered about it many times. We are big fans on React [MDX](https://github.com/mdx-js) ecosystem and tools like [Docz](https://www.docz.site) and [MDX-deck](https://jxnblk.com/mdx-deck/#0) have been a great inspiration for us.\n\nIt is all about DesignSTEM's target audience, the primary use case we have. Main goal of the framework is make it instantly usable for everybody with the minimal knowledge of HTML. Educators and hobbyist are just about to graduate from jQuery, so build steps and other heavy Javascript tooling is not an option.\n\nVueJS offers this easy migration path, so it was a natural choice for Fachwerk.\n\n<br>\n\n## What the font?\n\nIt is [IBM Plex](https://www.ibm.com/plex). We just love the latest design work from _Internationale Mensch-Maschine_.\n`;var Faq={components:{Markdown:Markdown},data:()=>({content:content}),template:`\n    <Markdown :content="content" />\n  `};for(const name in components){Vue.component(name,components[name])}Vue.config.devtools=true;new Vue({components:{Components:Components,Utils:Utils,Faq:Faq},el:"#app",data:()=>({inverted:false}),methods:utils,mounted(){document.addEventListener("keydown",e=>{if(e.altKey&&e.keyCode===84){this.inverted=!this.inverted}})}})})();
