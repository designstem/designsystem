(function(){"use strict";var AnimeData={description:`\nAn animation component, based on [AnimeJS](https://github.com/juliangarnier/anime) library.\n\nSupports most of the animation options AnimeJS provides.\n\nSee also avabilable [easing functions](https://github.com/juliangarnier/anime#built-in-functions). \n  `,example:`\n<AnimeData :to="99">\n  <h1\n    slot-scope="data"\n    class="bullet"\n  >\n      {{ Math.floor(data.value) }}\n  </h1>\n</AnimeData>\n\n<AnimeData :to="99" name="count" :duration="50000">\n  <h1\n    slot-scope="data"\n    class="bullet"\n  >\n    {{ Math.floor(data.count) }}\n  </h1>\n</AnimeData>\n  `,props:{name:{default:"value",type:String},from:{default:0,type:Number},to:{default:100,type:Number},duration:{default:5e3,type:Number},playing:{default:true,type:Boolean},loop:{default:true,type:Boolean},alternate:{default:false,type:Boolean},easing:{default:"linear",type:String}},data:()=>({value:0}),mounted(){this.value=this.from;const a=anime({targets:this,duration:this.duration,value:this.to,loop:this.loop,direction:this.alternate?"alternate":null,easing:this.easing,autoplay:false});this.$watch("playing",playing=>{if(playing){a.play()}else{a.pause()}},{immediate:true})},render(){return this.$scopedSlots.default?this.$scopedSlots.default({[this.name]:this.value}):""}};var Buttons={description:`\nA button group, meant to be used with <code>v-model</code>.\n  `,example:`\n<Buttons\n  v-model="someVariable"\n  :buttons="['First','Second']"\n/>\n  `,props:{buttons:{default:[],type:Array},value:{default:0,type:Number}},template:`\n    <div :style="{display: 'flex', marginLeft: '3px'}">\n      <div\n        v-for="(button,i) in buttons"\n        :key="i"\n        @click="$emit('input',i)"\n        :style="{\n          padding: '0.25rem 0.5rem',\n          border: '3px solid var(--color-gray-dark)',\n          borderTopLeftRadius: i == 0 && 'var(--border-radius)',\n          borderBottomLeftRadius: i == 0 && 'var(--border-radius)',\n          borderTopRightRadius: i == buttons.length - 1 && 'var(--border-radius)',\n          borderBottomRightRadius: i == buttons.length - 1 && 'var(--border-radius)',\n          color: 'var(--color-gray-dark)',\n          fontWeight: 'bold',\n          fontSize: '0.9rem',\n          marginLeft: '-3px',\n          cursor: 'pointer',\n          background: i === value ? 'var(--color-gray-medium)' : 'white'\n        }"\n      >\n        {{ button }}\n      </div>\n    </div>\n  `};var FetchData={description:`\nFetches data via AJAX.\n  `,example:`\n<FetchData\nurl="https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20%28select%20woeid%20from%20geo.places%281%29%20where%20text%3D%22Berlin%22%29&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys"\n>\n<pre\n  style="width: 250px"\n  slot-scope="data"\n>\nWeather in Berlin:\n{{\n  data.value\n  .query.results.channel.item.condition.text\n}}\n</pre>\n</FetchData>\n  `,data:()=>({value:null,loaded:false}),props:{url:{default:"",type:String}},mounted(){if(this.url){fetch(this.url).then(res=>res.json()).then(res=>{this.value=res;this.loaded=true})}},render(){return this.loaded?this.$scopedSlots.default?this.$scopedSlots.default({value:this.value}):"":""}};var Css={created(){if(this.$options.css){const el=document.createElement("style");el.innerHTML=this.$options.css;document.querySelector("head").appendChild(el)}}};var Math$1={mixins:[Css],name:"Math",description:`\nTypesetting math equations using <a href="https://github.com/Khan/KaTeX">KaTeX</a> library which supports most of the classic <a href="https://reu.dimacs.rutgers.edu/Symbols.pdf">LaTeX math syntax</a>.\n<small>\nIt also supports dynamic content with inline variables but due to the technical limitations you will need to pass the <code>:update</code> prop of any type to the component to indicate the contents need to update.\n</small>\n  `,example:`\nDoes not update\n<Math>\n  a = 10\n  b = a^2 + 100\n  c = \\frac{a}{b} = \\frac{10}{a^2 + 100}\n</Math>\n\nUpdates when edited and slider changed\n<SliderData>\n  <Math slot-scope="data" :update="data.value">\n    a = 10\n    b = a^2 + {{ data.value }}\n    c = \\frac{a}{b} = \\frac{10}{a^2 + 100}\n  </Math>\n</SliderData>\n  `,props:["update"],data:()=>({math:0}),methods:{renderMath(){this.math=katex.renderToString(this.$slots.default[0].text.trim().replace(/\n+/g,"\\newline"),{throwOnError:false})}},mounted(){this.renderMath();this.$watch("update",value=>this.renderMath())},template:`\n    <div v-html="math" />\n  `,css:`\n  .katex {\n    font-size: 1.3em;\n    color: var(--color-gray-dark);\n    padding: 1rem 2rem;\n    display: block;\n  }\n  .katex .colorbox {\n    border-radius: var(--border-radius);\n    color: red;\n    background: var(--color-blue-light) !important;\n  }\n  .katex .boxpad {\n    padding: 0;\n  }\n  .katex .boxpad .mord {\n    color: var(--color-blue-medium);\n    font-family: var(--font-mono) !important;\n    font-size: 1rem;\n  }\n  `};let d=[];d.push(`\n## scale\n\n<code>scale(value, start1, stop1, start2 = -2, stop2 = 2)</code>\n\nScales linearily the input <code>value</code>\nfrom the input range between <code>start1</code> and <code>stop1</code>\nto the output range  <code>start2</code> and <code>stop2</code>.\n\n#### Example:\n\n    scale(50, 0, 100, 0, 1)\n\n#### Output:\n\n    {{ scale(50, 0, 100, 0, 1) }}\n\n  `);const scale=(value,start1,stop1,start2=-2,stop2=2)=>{return(value-start1)/(stop1-start1)*(stop2-start2)+start2};d.push(`\n## round\n\n<code>round(value, decimals = 0)</code>\n\nRounds a number <code>value</code> to optional <code>decimals</code>.\n\nExample:\n    \n    round(0.1234)\n    round(0.1234, 2)\n\nOutput:\n  \n    {{ round(0.1234) }}\n    {{ round(0.1234, 2) }}\n\n`);const round=(value,decimals=0)=>{return Number(Math.round(value+"e"+decimals)+"e-"+decimals)};d.push(`\n## random\n\n<code>random(from, to, float = false)</code>\n\nGenerates a random integer number between <code>from</code> and <code>to</code>. \nIf <code>float = true</code>, the output value will be floating point number.\n\nExample:\n    \n    random(0, 2)\n    random(0, 2, true)\n\nOutput:\n  \n    {{ random(0, 2) }}\n    {{ random(0, 2, true) }}\n`);const random=(from,to,float=false)=>{const r=from+Math.random()*(to-from);return float?r:Math.floor(r,2)};d.push(`\n## range\n\n<code>range(from, to, step = 1)</code>\n\nGenerates an array of integer numbers in between <code>from</code> and <code>to</code> with optional <code>step</code> parameter.\n\nExample\n\n    range(-1, 1, 0.5)\n\nOutput\n\n    {{ range(-1, 1, 0.5) }}\n\n`);const range=(from,to,step=1)=>{const length=Math.floor((to-from)/step)+1;return Array.from({length:length}).map((_,i)=>from+i*step)};d.push(`\n## cx cy\n\n<code>cx(angle, radius)</code>\n<code>cy(angle, radius)</code>\n\nReturn 2D x and y coordinates on point on the circle (_polar coordinates_) based on <code>angle</code> in degrees and circle's <code>radius</code>.\n\n#### Example\n\n    cx(90, 10) cy(90, 10)\n\n#### Output\n\n    {{ cx(90, 10) }} {{ cy(90, 10) }}\n\n\n`);const cx=(deg,radius)=>{return Math.cos((deg-90)*(Math.PI/180))*radius};const cy=(deg,radius)=>{return Math.sin((deg-90)*(Math.PI/180))*radius};d.push(`\n## cpoints\n\n<code>cpoints(count, radius)</code>\n\nBased on <code>cx</code> and <code>cy</code> functions above calculates and <code>count</code> of <code>{ x, y }</code> points on the circle.\n\n#### Example\n\n    cpoints(4,10)\n\n#### Output\n\n    {{ cpoints(4,10) }}\n`);const cpoints=(count,radius)=>{return Array.from({length:count}).map((p,i)=>({x:cx(360/count*i,radius),y:cy(360/count*i,radius)}))};d.push(`\n## deg2rad\n\n<code>deg2rad(angle)</code>\n\nConverts angle in degrees to radians.\n\n#### Example\n\n<Math>\nradians = \\frac{degrees \\cdot \\pi}{180} = \\frac{180 \\cdot \\pi}{180} = \\pi\n</Math>\n\n    deg2rad(180)\n\n#### Output\n\n    {{ deg2rad(180) }}\n`);const deg2rad=deg=>deg*Math.PI/180;d.push(`\n## rad2deg\n\n<code>rad2deg(angle)</code>\n\nConverts angle in radians to degrees.\n\n#### Example\n\n    rad2deg(Math.PI)\n\n#### Output\n\n    {{ rad2deg(Math.PI) }}\n`);const rad2deg=rad=>rad*180/Math.PI;d.push(`\n## shuffle\n\n<code>shuffle(array)</code>\n\nSorts the array in random order.\n\n#### Example\n\n    shuffle(range(0,3))\n\n#### Output\n\n    {{ shuffle(range(0,3)) }}\n\n`);const shuffle=arr=>arr.sort(()=>Math.random()-.5);d.push(`\n## any\n\n<code>any(array)</code>\n\nPicks a random element from the array.\nSupports both array and function parameters syntax.\n\n#### Example\n\n    any([0,1,2])\n    any(0,1,2)\n\n#### Output\n\n    {{ any([0,1,2]) }}\n    {{ any(0,1,2) }}\n\n`);const any=function(arr){return arr instanceof Array?shuffle(arr)[0]:shuffle(Array.from(arguments))[0]};d.push(`\n## flatten\n\n<code>flatten(array)</code>\n\nFlatten multidimensional array\n\n#### Example\n\n    flatten([0,1,[2,[3,4]]])\n\n#### Output\n\n    {{ flatten([0,1,[2,[3,4]]]) }}\n\n`);const flatten=list=>list.reduce((a,b)=>a.concat(Array.isArray(b)?flatten(b):b),[]);d.push(`\n## hsl\n\n<code>hsl(h, s = 100, l = 50, a = 1)</code>\n\nGenerates CSS <code>hsl()</code> color string based on function parameters.\n\n#### Example\n\n    hsl(100,50,0,0.5)\n    hsl(100)\n\n#### Output\n\n    {{ hsl(100,50,0,0.5) }}\n    {{ hsl(100) }}\n\n`);const hsl=(h,s=100,l=50,a=1)=>`hsl(${h},${s}%,${l}%,${a})`;d.push(`\n## snapToGrid\n\n<code>snapToGrid(value, gridsize)</code>\n\nReturns the value in the closest point of 2D grid.\n\n#### Input\n\n    snapToGrid(0.51,0.5)\n\n#### Output\n\n    {{ snapToGrid(0.51,0.5) }}\n`);const snapToGrid=(value,gridsize)=>{return value%gridsize<gridsize/2?value-value%gridsize:value+gridsize-value%gridsize};d.push(`\n## log\n\n<code>log(message) = console.log(message) </code>\n\n\n`);const log=value=>console.log(value);const parseSheet=data=>{return data.feed.entry.map(entry=>{return Object.keys(entry).map(field=>{if(field.startsWith("gsx$")){return[field.split("$")[1],entry[field].$t]}}).filter(field=>field).reduce((field,item)=>{field[item[0]]=item[1];return field},{})})};const docs=()=>d;var utils=Object.freeze({scale:scale,round:round,random:random,range:range,cx:cx,cy:cy,cpoints:cpoints,deg2rad:deg2rad,rad2deg:rad2deg,shuffle:shuffle,any:any,hsl:hsl,flatten:flatten,snapToGrid:snapToGrid,log:log,parseSheet:parseSheet,docs:docs});var Poly={data:()=>({maxSides:16,sides:6,size:100}),computed:{viewBox(){return`-${this.size/2} -${this.size/2} ${this.size} ${this.size}`},points(){return Array.from({length:this.sides}).slice(0,this.sides).map((_,i)=>[cx(360/this.sides*i,this.size/2-3),cy(360/this.sides*i,this.size/2-3)])}},template:`\n    <div style="opacity: 0.2">\n      <svg :width="size" :height="size" :view-box.camel="viewBox">\n        <circle\n          cx="0"\n          cy="0"\n          :r="size / 2 - 2"\n          fill="none"\n          stroke="var(--color-gray-dark)"\n          opacity="0.5"\n        />\n        <polygon\n          :points="points.map(p => p.join(',')).join(' ')"\n          fill="none"\n          stroke="var(--color-gray-dark)"\n          stroke-width="3"\n        />\n        <line\n          v-for="point in points"\n          x1="0"\n          y1="0"\n          :x2="point[0]"\n          :y2="point[1]"\n          stroke="var(--color-gray-dark)"\n          opacity="0.5"\n        />\n      </svg>\n      <label>Number of sides: <code>{{sides}}</code></label>\n      <input type="range" v-model="sides" min="3" :max="maxSides" />\n    </div>\n  `};var PolygonData={description:`\nPasses <code>:count</code> points on the 2D circle with radius <code>:radius</code> as <code>data.points</code> down to the children components.\n  `,props:{count:{default:6,type:Number},radius:{default:1,type:Number}},computed:{points(){return Array.from({length:1e3}).slice(0,this.count).map((p,i)=>({x:cx(360/this.count*i-180,this.radius),y:cy(360/this.count*i-180,this.radius)}))}},render(){return this.$scopedSlots.default?this.$scopedSlots.default({points:this.points}):""}};var PolyhedronData={description:`\nPasses 3D coordinates of regular polyhedra as <code>data.normals</code> and <code>data.vertices</code> down to the children components. Supports <code>Tetrahedron</code>, <code>Octahedron</code>, <code>Icosahedron</code> and <code>Dodecahedron</code>.\n  `,example:`\n<PolyhedronData>\n  <ThreeScene\n    slot-scope="data"\n  >\n    <AnimeData\n    :to="deg2rad(360)"\n    :duration="10000"\n    >\n      <ThreeGroup\n        slot-scope="{value}"\n        :rotation="{\n          x:value,\n          y: value\n        }">\n        <ThreePolyhedron />\n        <ThreeLine\n          v-for="(v,i) in data.vertices"\n          :key="'v'+i"\n          :points="[v,v]"\n          stroke="red"\n        />\n        <ThreeGroup\n          v-for="(n,i) in data.normals"\n          :key="'n'+i"\n        >\n          <ThreeLine :points="n" />\n        </ThreeGroup>\n      </ThreeGroup>\n    </AnimeData>\n  </ThreeScene>\n</PolyhedronData>\n  `,props:{hedron:{default:"Icosahedron",type:String},radius:{default:1,type:Number}},computed:{vertices(){return new THREE[this.hedron+"Geometry"](this.radius,0).vertices.map(({x:x,y:y,z:z})=>({x:x,y:y,z:z}))},normals(){return new THREE[this.hedron+"Geometry"](this.radius,0).faces.map(f=>f.vertexNormals.map(({x:x,y:y,z:z})=>({x:x,y:y,z:z})))}},render(){return this.$scopedSlots.default?this.$scopedSlots.default({vertices:this.vertices,normals:this.normals}):""}};var SheetData={description:`\nFetches data from Google Sheets.\n  `,example:`\n<SheetData id="110RcQmdpOkFcS2KIlahEh8QezwH2cwnihDiV__ZiYqk">\n<TwoScene slot-scope="data">\n  <rect \n    v-for="(v,i) in data.value"\n    :x="scale(i,0,data.value.length,-1.9,1.9)"\n    :y="-2"\n    :height="scale(v.age,0,100,0,2.9)"\n    :width="(4 / data.value.length) - 0.1"\n    fill="var(--color-red)"\n    rx="0.05"\n  />  \n</TwoScene>\n</SheetData>\n  `,data:()=>({value:null,loaded:false}),props:{id:{default:"",type:String}},mounted(){if(this.id){fetch(`https://spreadsheets.google.com/feeds/list/${this.id}/od6/public/values?alt=json`).then(res=>res.json()).then(res=>{this.value=parseSheet(res);this.loaded=true})}},render(){return this.loaded?this.$scopedSlots.default?this.$scopedSlots.default({value:this.value}):"":""}};var SliderData={description:`\nWrapper component, adding a slider below the children and passing down the slider value as <code>data.value</code>.\n  `,example:`\n<SliderData>\n  <h1 class="bullet" slot-scope="data">\n    {{ data.value }}\n  </h1>\n</SliderData>\n\n<SliderData :from="10" :to="20" :value="15">\n  <h1 class="bullet" slot-scope="data">\n    {{ data.value }}\n  </h1>\n</SliderData>\n  `,props:{title:{default:"Value",type:String},value:{default:0,type:Number},from:{default:0,type:Number},to:{default:100,type:Number},step:{default:1,type:Number}},data:function(){return{innerValue:this.value}},template:`\n    <div>\n      <slot :value="innerValue"/>\n      <label>{{ title }} <code>{{ innerValue }}</code></label>\n      <input type="range" v-model="innerValue" :min="from" :max="to" :step="step" />\n    </div>\n  `};var Tabs={description:`\nTabs, meant to be used with <code>v-model</code>.\n  `,props:["buttons","value"],template:`\n    <div :style="{\n      display: 'flex',\n      height: '3rem',\n      borderBottom: '3px solid var(--color-gray-dark)'\n    }">\n      <div\n        v-for="(button,i) in buttons"\n        :key="i"\n        @click="$emit('input',i)"\n        :style="{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          padding: i == 0 ? '0 1.25rem 0 2rem' : '0 1.25rem',\n          fontWeight: 'bold',\n          borderRight: '3px solid var(--color-gray-dark)',\n          color: 'var(--color-gray-dark)',\n          cursor: 'pointer',\n          background: i === value ? 'var(--color-gray-medium)' : 'white'\n        }"\n      >\n        {{ button }}\n      </div>\n    </div>\n  `};const Base={inject:["_baseUrl"],props:{baseUrl:{type:String,default(){return this._baseUrl}}},provide(){return{_baseUrl:this.baseUrl}},methods:{dispatchEvent(name,detail,options={}){let e=new CustomEvent(name,Object.assign(options,{detail:detail,bubbles:true,cancelable:true}));return this.$el.dispatchEvent(e)}},template:`\n    <div><slot/></div>\n  `};const Object3D={mixins:[Base],provide(){return{parentObj:this.curObj}},inject:["parentObj"],props:{name:{type:String},type:{type:String,default:"Object3D"},obj:{type:Object},scale:{type:[Object,Number]},position:{type:Object},rotation:{type:Object}},watch:{scale:{deep:true,handler(v){this.setScale(v)}},position:{deep:true,handler(v){Object.assign(this.curObj.position,v)}},rotation:{deep:true,handler(v){Object.assign(this.curObj.rotation,v)}},obj(obj){this.curObj=obj},curObj(obj,oldObj){this.unsetObj(oldObj);this.setObj(obj)}},data(){let curObj=this.obj;if(!curObj){curObj=new THREE[this.type]}return{curObj:curObj}},mounted(){this.setObj(this.curObj)},beforeDestroy(){this.unsetObj(this.curObj)},methods:{setObj(obj){obj.name=this.name||obj.name||obj.type;this.setScale(this.scale);Object.assign(obj.position,this.position);Object.assign(obj.rotation,this.rotation);if(this.parentObj){this.parentObj.add(obj)}this.$emit("update:obj",obj)},unsetObj(obj){this.$emit("update:obj",null);if(this.parentObj){this.parentObj.remove(obj)}},setScale(v){if(v&&typeof v==="number"){v={x:v,y:v,z:v}}Object.assign(this.curObj.scale,v)}}};const Scene={mixins:[Object3D],inject:["global"],props:{obj:{type:Object}},data(){let curObj=this.obj;if(!curObj){curObj=new THREE.Scene}curObj.name=curObj.name||curObj.type;return{curObj:curObj}},mounted(){let scene=this.curObj;this.global.scene=scene;window.scene=scene}};const Renderer={provide(){return{parentObj:null,_baseUrl:null,global:this.global}},props:{size:{type:Object,required:true},obj:{type:Object}},data(){let curObj=this.obj;if(!curObj){curObj=new THREE.SVGRenderer({antialias:true});curObj.setClearColor(16777215)}curObj.name=curObj.name||curObj.type;curObj.setSize(this.size.w,this.size.h);let global={};global.rendererSize=this.size;global.rendererDom=curObj.domElement;return{curObj:curObj,global:global}},mounted(){this.$refs.container.appendChild(this.curObj.domElement);this.animate()},methods:{animate(){requestAnimationFrame(this.animate);this.curObj.render(this.global.scene,this.global.camera)}},template:`\n  <div>\n    <slot></slot>\n    <div ref="container"></div>\n  </div>\n  `};const Camera={mixins:[Object3D],inject:["global"],props:{obj:{type:Object}},data(){let curObj=this.obj;const{w:w,h:h}=this.global.rendererSize;if(!curObj){curObj=new THREE.PerspectiveCamera(75,w/h,.1,1e3)}curObj.name=curObj.name||curObj.type;return{curObj:curObj}},mounted(){this.global.camera=this.curObj}};var ThreeBox={example:`\n<ThreeScene>\n  <ThreeGrid />\n  <ThreeBox />\n</ThreeScene>  \n  `,mixins:[Object3D],props:{width:{default:1,type:Number},height:{default:1,type:Number},depth:{default:1,type:Number},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},data(){let curObj=this.obj;if(!curObj){var geometry=new THREE.BoxGeometry(this.width,this.height,this.depth);curObj=new THREE.Mesh(geometry,new THREE.MeshNormalMaterial({flatShading:true,opacity:.8,side:THREE.DoubleSide}))}curObj.name=curObj.name||curObj.type;return{curObj:curObj}}};var ThreeTriangle={description:`\n<i>Der Bauklotz</I> of 3D graphics, this component draws a triangle in 3D space. It accepts three 3D coordinates in <code>:points</code> array.\n  `,example:`\n<ThreeScene>\n  <ThreeGroup\n    :rotation="{ y: 0.5, x: 0.5 }"\n    :scale="{ x: 0.5, y: 0.5, z: 0.5 }"\n  >\n    <ThreeGrid />\n    <ThreeTriangle\n      :points="[\n        { x: 1, y: 1,  z: 0 },\n        { x: 1, y: 0,  z: 1 },\n        { x: 1, y: -1, z: 0 },\n      ]" \n    /> \n  </ThreeGroup>\n</ThreeScene>\n  `,mixins:[Object3D],props:{points:{default:[],type:Array},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},data(){let curObj=this.obj;if(!curObj){var geometry=new THREE.Geometry;this.points.forEach(p=>{geometry.vertices.push(new THREE.Vector3(p.x||0,p.y||0,p.z||0))});geometry.faces.push(new THREE.Face3(0,1,2));geometry.computeFaceNormals();curObj=new THREE.Mesh(geometry,new THREE.MeshNormalMaterial({flatShading:true,opacity:.5,side:THREE.DoubleSide}))}curObj.name=curObj.name||curObj.type;return{curObj:curObj}}};var ThreeGroup={mixins:[Object3D],name:"ThreeGroup",description:`\nGroups components in 3D scene and applies transformations like <code>:position</code>, <code>:rotation</code> and <code>:scale</code>.\n  `,example:`\n<ThreeScene>\n  <ThreeGrid />\n  <ThreeGroup\n    :position="{ x: 1, y: 1 }"\n    :rotation="{ z: 45 }"\n    :scale="{ x: 0.2, y: 0.2 }"\n    >\n      <ThreeBox />\n  </ThreeGroup>\n</ThreeScene>\n  `,props:{type:{type:String,default:"Mesh"},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},provide(){return{meshVm:this}}};var ThreeLine={mixins:[Object3D],description:`\nDraws a line in full 3D space, accepts any number of 3D coordinates in <code>:points</code> array.  `,example:`\n<ThreeScene>\n  <ThreeGroup\n    :rotation="{ y: 0.5, x: 0.5 }"\n    :scale="{ x: 0.5, y: 0.5, z: 0.5 }"\n  >\n  <ThreeGrid />\n  <ThreeLine\n    :points="[\n      { x: 1, y:  1, z: 0 },\n      { x: 1, y:  0, z: 1 },\n      { x: 1, y: -1, z: 0 },\n      { x: 1, y: -2, z: 0 },\n    ]"\n  />\n  </ThreeGroup>\n</ThreeScene>\n  `,mixins:[Object3D],props:{points:{default:[],type:Array},stroke:{default:"black"},strokeWidth:{default:3},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},data(){let curObj=this.obj;if(!curObj){const geometry=new THREE.Geometry;this.points.forEach(p=>{geometry.vertices.push(new THREE.Vector3(p.x||0,p.y||0,p.z||0))});const material=new THREE.LineBasicMaterial({color:new THREE.Color(this.stroke),linewidth:this.strokeWidth});curObj=new THREE.Line(geometry,material)}curObj.name=curObj.name||curObj.type;return{curObj:curObj}}};var ThreeRegularPolygon={mixins:[Object3D],description:`\n  `,example:`\n<AnimeData :duration="10000" :to="360">\n<ThreeScene slot-scope="data">\n  <ThreeGroup\n    :rotation="{\n      x: deg2rad(data.value),\n      y: deg2rad(data.value)\n    }"\n  >\n    <ThreeRegularPolygon\n      v-for="c in 2"\n      :rotation="{ x: deg2rad(360 / 2 * c) }"\n      :count="4"\n      :height="1"\n    />\n  </ThreeGroup>\n</ThreeScene>\n</AnimeData>\n  `,components:{ThreeTriangle:ThreeTriangle,ThreeGroup:ThreeGroup,ThreeLine:ThreeLine},methods:{cpoints:cpoints},props:{count:{default:6,type:Number},radius:{default:1,type:Number},height:{default:0,type:Number},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},computed:{points(){return cpoints(this.count,this.radius)}},template:`\n    <ThreeGroup>\n      <ThreeTriangle\n        v-for="(p,i) in points"\n        :key="i"\n        :points="[\n          {x: p.x, y: p.y, z: 0},\n          {\n            x: points[i == points.length - 1 ? 0 : i + 1].x,\n            y: points[i == points.length - 1 ? 0 : i + 1].y,\n            z: 0\n          },\n          {x: 0, y: 0, z: 0}\n        ]"\n      />   \n      <ThreeTriangle\n        v-for="(p,i) in points"\n        :key="i"\n        :points="[\n          {x: p.x, y: p.y, z: 0},\n          {\n            x: points[i == points.length - 1 ? 0 : i + 1].x,\n            y: points[i == points.length - 1 ? 0 : i + 1].y,\n            z: 0\n          },\n          {x: 0, y: 0, z: height}\n        ]"\n      />\n      <ThreeLine :points="points.concat(points[0])" />\n      <ThreeLine\n        v-for="p in points"\n        :points="[\n          {x: p.x, y: p.y, z: 0},\n          {x: 0, y: 0, z: height}\n        ]"\n      />\n    </ThreeGroup>\n  `};var ThreeCircle={mixins:[Object3D],description:`\n[Zeit](https://www.youtube.com/watch?v=rjvF36gzLF8).\n  `,example:`\n<ThreeScene>\n  <ThreeGrid />\n  <ThreeCircle\n    :position="{ x: 1, y: 1 }"\n    :rotation="{ z: 45 }"\n    :scale="{ x: 0.2, y: 0.2 }"\n  />\n</ThreeScene>\n  `,components:{ThreeRegularPolygon:ThreeRegularPolygon},props:{r:{default:1,type:Number},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:[Object,Number]}},template:`\n    <ThreeRegularPolygon :radius="r" :count="64" />\n  `};var ThreeGrid={mixins:[Object3D],description:`\nAdds a grid to the 3D scene and applies transformations like <code>:position</code>, <code>:rotation</code> and <code>:scale</code>.\n  `,example:`\n<ThreeScene>\n  <ThreeGrid\n    :rotation="{ y: 0.5, x: 0.5 }"\n    :scale="{ x: 0.5, y: 0.5, z: 0.5 }"\n  />\n</ThreeScene>\n  `,components:{ThreeGroup:ThreeGroup,ThreeLine:ThreeLine},props:{scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},methods:{deg2rad:deg2rad},template:`\n  <ThreeGroup>\n    <ThreeGroup\n      v-for="(rotation,i) in [\n        { x: 0, y: 0, z: 0},\n        { x: 0, y: deg2rad(90), z: 0},\n        { x: deg2rad(90), y: 0, z: 0}\n      ]"\n      :rotation="rotation"\n      :key="i"\n    >\n    <ThreeLine\n      v-for="(x,i) in [-2,-1,0,1,2]"\n      :key="'a'+i"\n      stroke-width="1"\n      :stroke="0xdddddd"\n      :points="[\n        { x, y: 2 },\n        { x, y: -2 }\n      ]"\n    />\n    <ThreeLine\n      v-for="(y,i) in [-2,-1,0,1,2]"\n      :key="'b'+i"\n      stroke-width="1"\n      :stroke="0xdddddd"\n      :points="[\n        { x: 2, y },\n        { x: -2, y }\n      ]"\n    />\n  </ThreeGroup>\n  <ThreeLine\n      :stroke="0xaaaaaa"\n      :stroke-width="1.5"\n      :points="[\n        { x: 0, y: 2, z: 0 },\n        { x: 0, y: -2, z: 0 }\n      ]"\n  />\n  <ThreeLine\n    :stroke="0xaaaaaa"\n    :stroke-width="1.5"\n    :points="[\n      { x: 2, y: 0, z: 0 },\n      { x: -2, y: 0, z: 0 }\n    ]"\n  />\n  <ThreeLine\n    :stroke="0xaaaaaa"\n    :stroke-width="1.5"\n    :points="[\n      { x: 2, y: 0, z: 0 },\n      { x: -2, y: 0, z: 0 }\n    ]"\n  />\n  </ThreeGroup>\n  `};var ThreeLight={mixins:[Object3D],props:{color:{default:"white",type:[String,Number]},intensity:{default:1,type:Number}},data(){let curObj=this.obj;if(!curObj){curObj=new THREE.DirectionalLight(new THREE.Color(this.color),this.intensity)}curObj.name=curObj.name||curObj.type;return{curObj:curObj}}};const InternalThreePolygon={mixins:[Object3D],props:{points:{default:[]}},data(){let curObj=this.obj;if(!curObj){var vectorPoints=this.points.map(p=>new THREE.Vector3(p.x||0,p.y||0,p.z||0));var shape=new THREE.Shape(vectorPoints);var geometry=new THREE.ShapeGeometry(shape);curObj=new THREE.Mesh(geometry,new THREE.MeshNormalMaterial({flatShading:true,opacity:.7,side:THREE.DoubleSide}))}curObj.name=curObj.name||curObj.type;return{curObj:curObj}}};var ThreePolygon={mixins:[Object3D],name:"ThreePolygon",description:`\nDraws a polygon on a plane in 3D space, accepts 2D coordinates in <code>:points</code> array.\n  `,example:`\n<ThreeScene>\n  <ThreeGrid />\n  <ThreePolygon\n    :points="[\n      { x:  1, y:  1 },\n      { x:  1, y: -1 },\n      { x: -1, y: -1 },\n      { x: -1, y:  1 },\n    ]"\n  />\n</ThreeScene>\n  `,components:{InternalThreePolygon:InternalThreePolygon,ThreeGroup:ThreeGroup,ThreeLine:ThreeLine},props:{points:{default:[],type:Array},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},computed:{linePoints(){return this.points.concat(this.points[0]).map(p=>{p.z=0;return p})}},template:`\n    <ThreeGroup>\n      <InternalThreePolygon :points="points" />\n      <ThreeLine :points="linePoints" />\n    </ThreeGroup>\n  `};var ThreePolyhedron={example:`\n<ThreeScene>\n  <ThreePolyhedron\n    v-for="(hedron,i) in [\n      'Tetrahedron',\n      'Octahedron',\n      'Icosahedron',\n      'Dodecahedron'\n    ]"\n    :key="i"\n    :hedron="hedron"\n    :position="{x: i - 1.5}"\n    :radius="0.5"\n  />\n</ThreeScene>  \n  `,mixins:[Object3D],props:{hedron:{default:"Icosahedron",type:String},radius:{default:1,type:Number},scale:{default:()=>({}),type:[Object,Number]},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object}},data(){let curObj=this.obj;if(!curObj){var geometry=new THREE[this.hedron+"Geometry"](this.radius,0);curObj=new THREE.Mesh(geometry,new THREE.MeshNormalMaterial({flatShading:true,opacity:.8,side:THREE.DoubleSide}))}curObj.name=curObj.name||curObj.type;return{curObj:curObj}}};var ThreeScene={description:`\n_Der Raum_.\n`,example:`\n<ThreeScene>\n    <ThreeRegularPolygon\n      :count="64"\n      :rotation="{ y: 0.5, x: 0.5 }"\n    />\n    <ThreeLine\n      :points="[{ z: 0 },{ z: 1 }]"\n      :rotation="{ y: 0.5, x: 0.5 }"\n    />\n</ThreeScene>\n  `,components:{Renderer:Renderer,Scene:Scene,Camera:Camera},template:`\n    <div class="three">\n      <Renderer :size="{ w: 250, h: 250 }">\n        <Scene>\n          <Camera :position="{ z: 2.63 }" />\n          <slot />\n        </Scene>\n      </Renderer>\n    </div>\n  `};var Transport={description:"A simple play / pause button, meant to be used with v-model",example:`\n<Transport v-model="someVariable" />\n  `,props:{value:{default:false}},template:`\n    <div\n      class="button_secondary"\n      style="width: 1rem; justify-content: center;"\n      @click="$emit('input', ! value)"\n    >\n      {{ value ? '❚❚' : '►' }}\n    </div>\n  `};var Triangle={props:{p1:{default:()=>({x:90,y:10})},p2:{default:()=>({x:90,y:90})},p3:{default:()=>({x:10,y:90})},value:{}},data:()=>({size:100,currentIndex:0,points:[]}),created:function(){this.points=this.computedPoints},computed:{viewBox(){return`0 0 ${this.size} ${this.size}`},computedPoints(){return Array.from([this.p1,this.p2,this.p3])},coordinates(){return`${this.points[0].x},${this.points[0].y} ${this.points[1].x},${this.points[1].y} ${this.points[2].x},${this.points[2].y} `}},methods:{onSceneMousemove(event){const rect=this.$refs.svg.getBoundingClientRect();if(this.currentIndex>-1&&this.points[this.currentIndex].dragging){this.points[this.currentIndex].x=event.clientX-rect.left;this.points[this.currentIndex].y=event.clientY-rect.top}},onPointMousedown(index){this.currentIndex=index;this.points[index].dragging=true},onPointMouseup(){delete this.points[this.currentIndex].dragging;this.points[this.currentIndex].dragging=false;this.$emit("input",this.points);this.currentIndex=-1}},template:`\n    <div>\n      <svg :width="size" :height="size" :view-box.camel="viewBox" \n        @mousemove="onSceneMousemove"\n        @mouseup.stop="onPointMouseup"\n        ref="svg"\n    >\n       \n        <polygon\n          :points="coordinates"\n         \n          fill="none"\n          stroke="var(--color-gray-dark)"\n          stroke-width="3"\n          \n        />\n        <circle\n            v-for="(point, index) in points"\n            :cx="point.x"\n            :cy="point.y"\n            r="6"\n            @mousedown.stop="onPointMousedown(index)"\n        />\n\n      </svg>\n      \n      \x3c!--<label>First point x: <code>{{points[0].x}}</code></label>\n      <input type="range" v-model="points[0].y" min="0" max="100" />--\x3e\n    </div>\n  `};const Object2D={computed:{positionTransform(){return`translate(${this.position.x||0} ${this.position.y||0})`},rotationTransform(){return`rotate(${this.rotation.x||this.rotation.y||this.rotation.z||0})`},scaleTransform(){return`scale(${this.scale.x||1,this.scale.y||1})`},transform(){return`${this.positionTransform} ${this.rotationTransform} ${this.scaleTransform}`}}};var TwoBox={mixins:[Object2D],description:`\n Kazimir Malevich must still be proud.  \n  `,example:`\n<TwoScene>\n  <TwoGrid />\n  <TwoBox\n    :position="{ x: 1, y: 1 }"\n    :rotation="{ z: 45 }"\n    :scale="{ x: 0.2, y: 0.2 }"\n  />\n</TwoScene>\n  `,props:{x:{default:0,type:Number},y:{default:0,type:Number},width:{default:1,type:Number},height:{default:1,type:Number},fill:{default:"black",type:String},opacity:{default:1,type:Number},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object}},template:`\n    <rect\n      :x="x - 0.5"\n      :y="y - 0.5"\n      :width="width"\n      :height="height"\n      :fill="fill"\n      :opacity="opacity"\n      :transform="transform"\n    />\n  `};var TwoSceneScope={mixins:[Css],name:"TwoSceneScope",description:`\n**🔬 This component is experimental.**\n\n<code>TwoScene</code> with mouse tracking!\n`,example:`\n<TwoSceneScope>  \n  <g slot-scope="data">\n    <circle\n      :r="data.mouse.pressed ? 1.1 : 1"\n      opacity="0.1"\n      style="transition: all 100ms"\n    />\n    <circle\n      :r="data.mouse.pressed ? 0.8 : 1"\n      style="transition: all 100ms"\n    />\n    <circle\n      :cx="data.mouse.x"\n      :cy="data.mouse.y"\n      :r="data.mouse.pressed ? 0.2 : 0.1"\n      fill="var(--color-red)"\n      style="transition: all 100ms"\n    />\n  </g>\n</TwoSceneScope>\n  `,props:{size:{default:250,type:Number}},computed:{viewBox(){return`-2 -2 4 4`}},data:()=>({mouseX:0,mouseY:0,mousePressed:false}),methods:{onSceneMousemove(e){let svg=this.$refs.svg;let point=svg.createSVGPoint();point.x=e.clientX;point.y=e.clientY;let ctm=this.$refs.container.getScreenCTM();if(ctm=ctm.inverse()){point=point.matrixTransform(ctm)}this.mouseX=point.x;this.mouseY=point.y}},template:`\n    <svg\n        :width="size"\n        :height="size"\n        :view-box.camel="viewBox"\n        class="two"\n        @mousemove="onSceneMousemove"\n        @mousedown="mousePressed = true"\n        @mouseup="mousePressed = false"\n        ref="svg"\n    >\n      <g transform="scale(1,-1)" ref="container">\n        <slot name="content" />\n        <slot :mouse="{ x: mouseX, y: mouseY, pressed: mousePressed }" />\n      </g>\n    </svg>\n  `,css:`\n  .two * {\n    vector-effect: non-scaling-stroke;\n  }\n  .two text {\n    font-size: 1.5%;\n    transform: scale(1, -1);\n    text-anchor: middle;\n    pointer-events: none;\n  }\n  `};const Drag={props:["mouse","points","snap"],data:function(){return{draggedPoints:this.points}},methods:{handleMove(p){if(p.pressed){p.x=this.snap?snapToGrid(this.mouse.x,.25):this.mouse.x;p.y=this.snap?snapToGrid(this.mouse.y,.25):this.mouse.y}}},template:`\n    <g>\n      <slot :draggedPoints="draggedPoints" />\n      <g v-for="(p,i) in draggedPoints">\n        <circle\n          :cx="p.x"\n          :cy="p.y"\n          :r="p.active ? 0.22 : 0.2"\n          stroke-width="3"\n          stroke="black"\n          :fill="p.pressed ? '#eee' : 'white'"\n          style="transition: fill r 100ms"\n        />\n        <circle\n          :cx="p.x"\n          :cy="p.y"\n          r="1.25"\n          fill="rgba(0,0,0,0)"\n          @mouseout="p.pressed = false; p.active = false"\n        />\n        <circle\n          :cx="p.x"\n          :cy="p.y"\n          r="0.5"\n          fill="rgba(0,0,0,0)"\n          style="cursor: pointer"\n          @mouseover="p.active = true"\n          @mouseout="p.active = false"\n          @mousedown="p.pressed = true"\n          @mouseup="p.pressed = false; p.active = false"\n          @mousemove="handleMove(p)"\n        />\n      </g>\n    </g>\n  `};var TwoDragScope={description:`\n**🔬 This component is experimental.**\n<br><br><br><br><br><br>\n`,example:`\n  <TwoDragScope\n    :points="[\n      { x:  0, y:  1 },\n      { x:  1, y: -1 },\n      { x: -1, y: -1 }\n    ]"\n    :snap="true"\n  >\n    <TwoGroup slot-scope="data">\n      <TwoGrid />\n      <TwoPolygon :points="data.points" />\n    </TwoGroup>\n  </TwoDragScope>\n</TwoSceneScope>\n  `,components:{Drag:Drag,TwoSceneScope:TwoSceneScope},props:["points","snap"],data:function(){return{draggedPoints:this.points}},methods:{handleMove(p){if(p.pressed){p.x=this.snap?snapToGrid(this.mouse.x,.25):this.mouse.x;p.y=this.snap?snapToGrid(this.mouse.y,.25):this.mouse.y}}},template:`\n  <TwoSceneScope>  \n    <Drag\n      slot-scope="mouseData"\n      :mouse="mouseData.mouse"\n      :points="[\n        { x:  0, y:  1 },\n        { x:  1, y: -1 },\n        { x: -1, y: -1 }\n      ]"\n      :snap="snap"\n    >\n      <template slot-scope="data">\n        <slot :points="data.draggedPoints" :mouse="mouseData.mouse" />\n      </template>\n    </Drag>\n  </TwoSceneScope>\n  `};var TwoCircle={mixins:[Object2D],description:`\nSounds like [Zeit](https://www.youtube.com/watch?v=rjvF36gzLF8).  \n  `,example:`\n<TwoScene>\n  <TwoGrid />\n  <TwoCircle\n    :position="{ x: 1, y: 1 }"\n    :rotation="{ z: 45 }"\n    :scale="{ x: 0.2, y: 0.2 }"\n  />\n</TwoScene>  \n  `,props:{r:{default:1,type:Number},fill:{default:"black",type:String},stroke:{default:"none",type:String},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object}},template:`\n    <circle\n      :r="r"\n      :fill="fill"\n      :stroke="stroke"\n      stroke-width="3"\n      :transform="transform"\n    />\n  `};var TwoGrid={mixins:[Object2D],description:`\nAs the classic once [wrote](http://printingcode.runemadsen.com/lecture-grid/), there is nothing worse for an artist than a blank canvas.\n  `,example:`\n<TwoScene>\n  <TwoGrid />\n  <TwoGrid\n    :position="{ x: 1, y: 1 }"\n    :rotation="{ z: 45 }"\n    :scale="{ x: 0.2, y: 0.2 }"\n  />\n</TwoScene>\n  `,props:{position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object}},template:`\n  <g :transform="transform">\n    <line\n      v-for="x in [-2,-1,0,1,2]"\n      :x1="x"\n      :y1="-3"\n      :x2="x"\n      :y2="3"\n      :stroke="'rgba(0,0,0,' + (x == 0 ? 0.5: 0.2) + ')'"\n    />\n    <line\n      v-for="y in [-2,-1,0,1,2]"\n      :x1="-3"\n      :y1="y"\n      :x2="3"\n      :y2="y"\n      :stroke="'rgba(0,0,0,' + (y == 0 ? 0.5: 0.2) + ')'"\n    />\n  </g>\n  `};var TwoGroup={mixins:[Object2D],description:`\nThe component is a wrapper around SVG's <code>g</code> for feature parity with <code>ThreeGroup</code> and applying transformations like <code>:position</code>, <code>:rotation</code> and <code>:scale</code>\n\n  `,example:`\n<TwoScene>\n  <TwoGrid />\n  <TwoGroup\n    :position="{ x: 1, y: 1 }"\n    :rotation="{ z: 45 }"\n    :scale="{ x: 0.2, y: 0.2 }"\n  >\n    <TwoBox />\n  </TwoGroup>\n</TwoScene>\n  `,props:{position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object}},template:`\n    <g :transform="transform">\n      <slot />\n    </g>\n  `};var TwoLine={mixins:[Object2D],description:`\n  `,example:`\n<TwoScene>\n  <TwoGrid />\n  <TwoLine\n    :points="[\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: 0, y: 1 },\n    ]"\n  />\n  <TwoLine\n    :position="{ x: 1, y: 1 }"\n    :rotation="{ z: 45 }"\n    :scale="{ x: 0.2, y: 0.2 }"\n    :points="[\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: 0, y: 1 },\n    ]"\n  />\n</TwoScene>\n  `,props:{points:{default:[],type:Array},stroke:{default:"black",type:String},opacity:{default:1,type:Number},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object}},computed:{svgPoints(){return this.points.map(({x:x,y:y})=>`${x},${y}`).join(" ")}},template:`\n    <g :transform="transform">\n      <polyline\n        :points="svgPoints"\n        :stroke="stroke"\n        stroke-width="3"\n        stroke-linecap="round"\n        stroke-linejoin="round"\n        fill="none"\n        :opacity="opacity"\n      />\n    </g>\n    `};var TwoPolygon={mixins:[Object2D],example:`\n<TwoScene>\n  <TwoGrid />\n  <TwoPolygon\n    :points="[\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: 0, y: 1 },\n    ]"\n  />\n  <TwoPolygon\n    :points="[\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: 0, y: 1 },\n    ]"\n    :position="{ x: 1, y: 1 }"\n    :rotation="{ z: 45 }"\n    :scale="{ x: 0.2, y: 0.2 }"\n  />\n</TwoScene>\n  `,props:{points:{default:[],type:Array},fill:{default:"gray",type:String},stroke:{default:"black",type:String},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object}},computed:{svgPoints(){return this.points.map(({x:x,y:y})=>`${x},${y}`).join(" ")}},template:`\n    <polygon\n      :points="svgPoints"\n      :stroke="stroke"\n      :fill="fill"\n      stroke-width="3"\n      stroke-linecap="round"\n      stroke-linejoin="round"\n      :transform="transform"\n    />\n    `};var TwoRegularPolygon={mixins:[Object2D],description:`\n🚜 **This component needs rework.** \n  `,example:`\n<AnimeData :to="16">\n  <TwoScene slot-scope="{value}">\n    <TwoRegularPolygon\n      :count="value"\n    />\n    <TwoRegularPolygon\n      :count="value"\n      :position="{ x: 1, y: 1 }"\n      :rotation="{ z: 45 }"\n      :scale="{ x: 0.2, y: 0.2 }"\n    />\n  </TwoScene>\n</AnimeData>\n  `,components:{TwoPolygon:TwoPolygon},props:{count:{default:6,type:Number},radius:{default:1,type:Number},position:{default:()=>({}),type:Object},rotation:{default:()=>({}),type:Object},scale:{default:()=>({}),type:Object}},computed:{points(){return Array.from({length:1e3}).slice(0,this.count).map((p,i)=>({x:cx(360/this.count*i-180,this.radius),y:cy(360/this.count*i-180,this.radius)}))}},template:`\n    <TwoPolygon\n      :points="points"\n      :transform="transform"\n    />\n  `};var TwoScene={mixins:[Css],description:`\nA simple 2D scene with some tweaks to regular SVG document.\n\nNote that **Y axis is flipped** and <code>x</code> and <code>y</code> span from <code>-2</code> to <code>2</code> to work same way as **ThreeScene**.\n`,example:`\n<TwoScene>\n    <circle r="1" />\n</TwoScene>\n  `,props:{size:{default:250,type:Number}},computed:{viewBox(){return`-2 -2 4 4`}},template:`\n    <svg\n        :width="size"\n        :height="size"\n        :view-box.camel="viewBox"\n        class="two"\n    >\n      <g transform="scale(1,-1)">\n        <slot />\n      </g>\n    </svg>\n  `,css:`\n    .two * {\n      vector-effect: non-scaling-stroke;\n    }\n    .two text {\n      font-size: 1.5%;\n      transform: scale(1, -1);\n      text-anchor: middle;\n      pointer-events: none;\n    }\n  `};var VrBox={props:{fill:{default:"black"}},template:`\n    <a-box height="1" color="black" opacity="0.5" ></a-box>\n  `};var VrGrid={template:`\n    <a-entity>\n    <a-entity\n      v-for="x in [-2,-1,0,1,2]"\n      :line="'start: '+x+', -2, 0; end: '+x+' 2 0; color: black'"\n      :key="'x'+x"\n    />\n    <a-entity\n      v-for="y in [-2,-1,0,1,2]"\n      :line="'start: -2, '+y+', 0; end: 2 '+y+' 0; color: black'"\n      :key="'y'+y"\n    />\n    <a-entity\n      v-for="z in [-2,-1,0,1,2]"\n      :line="'start: 0, -2 '+z+'; end: 0 2 '+z+'; color: black'"\n      :key="'z'+z"\n    />\n    </a-entity>\n  `};var VrLine={template:`\n    <a-entity>\n      <a-entity line="start: 0, 0, 0; end: 1 1 4; color: red" />\n    </a-entity>\n  `};Vue.config.ignoredElements=["a-scene","a-sky","a-box","a-line"];var VrScene={description:`\n**🔬 This component is experimental.**\n\nA basic [A-Frame](https://aframe.io/) wrapper.\n  `,template:`\n    <a-scene embedded style="\n      width: 250px;\n      height: 250px;\n    ">\n      <a-entity position="0 0 2.5" camera look-controls />\n      <a-sky color="white"></a-sky>\n      <slot />\n    </a-scene>\n  `};const sortedComponents=[{TwoScene:TwoScene},{TwoGrid:TwoGrid},{TwoGroup:TwoGroup},{TwoLine:TwoLine},{TwoCircle:TwoCircle},{TwoBox:TwoBox},{TwoPolygon:TwoPolygon},{TwoRegularPolygon:TwoRegularPolygon},{TwoSceneScope:TwoSceneScope},{TwoDragScope:TwoDragScope},{ThreeScene:ThreeScene},{ThreeGroup:ThreeGroup},{ThreeGrid:ThreeGrid},{ThreeTriangle:ThreeTriangle},{ThreeLine:ThreeLine},{ThreeCircle:ThreeCircle},{ThreeBox:ThreeBox},{ThreePolygon:ThreePolygon},{ThreePolyhedron:ThreePolyhedron},{ThreeRegularPolygon:ThreeRegularPolygon},{ThreeLight:ThreeLight},{AnimeData:AnimeData},{SliderData:SliderData},{FetchData:FetchData},{SheetData:SheetData},{PolyhedronData:PolyhedronData},{Math:Math$1},{Transport:Transport},{Buttons:Buttons},{Triangle:Triangle},{Poly:Poly},{VrScene:VrScene},{VrBox:VrBox},{VrLine:VrLine},{VrGrid:VrGrid},{Tabs:Tabs},{PolygonData:PolygonData}];var frameworkComponents=Object.freeze({AnimeData:AnimeData,Buttons:Buttons,FetchData:FetchData,Math:Math$1,Poly:Poly,PolygonData:PolygonData,PolyhedronData:PolyhedronData,SheetData:SheetData,SliderData:SliderData,Tabs:Tabs,ThreeBox:ThreeBox,ThreeCircle:ThreeCircle,ThreeGrid:ThreeGrid,ThreeGroup:ThreeGroup,ThreeLight:ThreeLight,ThreeLine:ThreeLine,ThreePolygon:ThreePolygon,ThreePolyhedron:ThreePolyhedron,ThreeRegularPolygon:ThreeRegularPolygon,ThreeScene:ThreeScene,ThreeTriangle:ThreeTriangle,Transport:Transport,Triangle:Triangle,TwoBox:TwoBox,TwoCircle:TwoCircle,TwoDragScope:TwoDragScope,TwoGrid:TwoGrid,TwoGroup:TwoGroup,TwoLine:TwoLine,TwoPolygon:TwoPolygon,TwoRegularPolygon:TwoRegularPolygon,TwoScene:TwoScene,TwoSceneScope:TwoSceneScope,VrBox:VrBox,VrGrid:VrGrid,VrLine:VrLine,VrScene:VrScene,sortedComponents:sortedComponents});var Render={name:"Render",components:frameworkComponents,props:{t:String},data:()=>({render:null,someVariable:0}),methods:utils,mounted(){this.$watch("t",value=>{const template=Vue.compile(value);this.render=template.render;this.$options.staticRenderFns=[];this._staticTrees=[];for(var i in template.staticRenderFns){this.$options.staticRenderFns.push(template.staticRenderFns[i])}},{immediate:true})},render:function(h){return this.render?this.render():h()}};var Editor={props:["value"],data:()=>({content:""}),mounted(){this.$watch("value",value=>{this.content=value},{immediate:true});this.$refs.editor.onkeydown=function(e){if(e.keyCode===9){const val=this.value;const start=this.selectionStart;const end=this.selectionEnd;this.value=val.substring(0,start)+"  "+val.substring(end);this.selectionStart=this.selectionEnd=start+2;return false}}},template:`\n    <textarea\n      ref="editor"\n      v-model="content"\n      @input="$emit('input', content)"\n      style="\n        border: none;\n        color: var(--color-blue-medium);\n        font-family: var(--font-mono);\n        font-size: 0.85rem;\n        height: 100%;\n        line-height: 1.3rem;\n        outline: none;\n        resize: none;\n        width: 100%;\n        background: var(--color-blue-light);\n        padding: 0.8rem;\n        border-radius: var(--border-radius);\n      "\n    />\n  `};var Markdown={components:{Render:Render},props:["content"],methods:{marked:marked},template:`\n    <Render :t="'<div>' + marked(content, { breaks: true }) + '</div>'" />\n  `};const Props={props:{props:{type:[Object,Array]}},methods:{formatDefault(prop){if(prop.hasOwnProperty("default")){if(prop.default instanceof Object&&!(prop.default instanceof Array)){return"{}"}return prop.default.length==0?"[]":String(prop.default)}return null},formatType(prop){if(prop.hasOwnProperty("type")){const t=prop.type instanceof Array?prop.type[0]():prop.type();return t instanceof Array?"array":typeof t}return null}},computed:{propsData(){if(this.props){return this.props instanceof Array?this.props.map(p=>({name:p})):Object.entries(this.props).map(p=>({name:p[0],default:this.formatDefault(p[1]),type:this.formatType(p[1])}))}else{return[]}}},template:`\n    <div style="font-size: 0.9rem">\n    <table>\n      <thead>\n        <th>Name</th>\n        <th>Default</th>\n        <th>Type</th>\n      </thead>\n      <tbody>\n        <tr v-for="prop in propsData">\n          <td><code style="background: none">:{{ prop.name }}</code></td>\n          <td><code v-if="prop.default" style="background: none">{{ prop.default }}</code></td>\n          <td>\n            <code\n              v-if="prop.type"\n              style="background: none; color: var(--color-gray-medium)">\n                {{ prop.type }}\n            </code>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    </div>\n  `};var Components={components:{Render:Render,Editor:Editor,Markdown:Markdown,Props:Props},data:()=>({componentData:sortedComponents.map(c=>Object.entries(c)[0]).map(c=>Object.assign(c[1],{name:c[0]})).filter(c=>c.example).map(({name:name,example:example,description:description,props:props})=>({name:name,example:example?example.trim():"",description:description||"",props:props}))}),template:`\n    <div>\n        <div v-for="(c,i) in componentData" :style="{\n          padding: '2rem 0',\n          borderTop: i > 0 ? '0px solid var(--color-gray-light)' : '',\n          minHeight: '15rem'\n        }"\n        >\n          <h2>{{ c.name }}</h2>\n          <div style="display: flex">\n            <div style="width: 300px;">\n              <Markdown :content="c.description" />\n              <br>\n              <template v-if="c.props">\n                <h3>Props</h3>\n                <Props :props="c.props" />\n              </template>\n            </div>\n            <div style="width: 500px; margin-left: 2rem;">\n              <Editor style="border: 3px solid var(--color-gray-light)" v-model="c.example" />\n            </div>\n            <Render :t="'<div>'+c.example+'</div>'" style="flex: 1; align-items: flex-start; margin-left: 2rem;" />\n          </div>\n        </div>\n    </div>\n  `};var Utils={components:{Markdown:Markdown},data:()=>({docs:docs()}),template:`\n      <Markdown :content="docs.join('<br><p />')" />\n  `};const content=`\n## What's missing?\n\nPhew, a lot. Some ideas:\n\n<code>CanvasScene</code>, a simple wrapper around 2d canvas, just providing way to set pixels, modeled after [this tutorial](https://alligator.io/vuejs/vue-html5-canvas/)\n\n<code>StateData</code>, small set of state containers, modeled after [React Powerplug](https://alligator.io/react/react-powerplug/)\n\nGeneric <code>FetchData</code>, modeled after [So Fetch](https://beta.observablehq.com/@alecglassford/so-fetch)\n\n<br>\n\n## Why Vue? Why not React?\n\nWhile development the framework we wondered about it many times. We are big fans on React [MDX](https://github.com/mdx-js) ecosystem and tools like [Docz](https://www.docz.site) and [MDX-deck](https://jxnblk.com/mdx-deck/#0) have been a great inspiration for us.\n\nIt is all about DesignSTEM's target audience, the primary use case we have. Main goal of the framework is make it instantly usable for everybody with the minimal knowledge of HTML. Educators and hobbyist are just about to graduate from jQuery, so build steps and other heavy Javascript tooling is not an option.\n\nVueJS offers this easy migration path, so it was a natural choice for Fachwerk.\n\n<br>\n\n## What the font?\n\nIt is [IBM Plex](https://www.ibm.com/plex). We just love the latest design work from _Internationale Mensch-Maschine_.\n`;var Faq={components:{Markdown:Markdown},data:()=>({content:content}),template:`\n    <Markdown :content="content" />\n  `};new Vue({components:{Components:Components,Utils:Utils,Faq:Faq},el:"#app"})})();
